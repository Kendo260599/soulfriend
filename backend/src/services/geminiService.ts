import { GoogleGenerativeAI, GenerativeModel } from '@google/generative-ai';
import config from '../config/environment';
import { logger } from '../utils/logger';

export class GeminiService {
  private genAI!: GoogleGenerativeAI;
  private model!: GenerativeModel;
  private isInitialized: boolean = false;

  constructor() {
    const apiKey = process.env.GEMINI_API_KEY;
    if (!apiKey) {
      logger.warn('GEMINI_API_KEY is not set. GeminiService will not be initialized.');
      return;
    }

    try {
      this.genAI = new GoogleGenerativeAI(apiKey);
      
      // Use gemini-pro as primary (more stable)
      // gemini-1.5-flash may require different API tier
      this.model = this.genAI.getGenerativeModel({ model: 'gemini-pro' });
      this.isInitialized = true;
      logger.info('‚úÖ Gemini AI initialized successfully with gemini-pro');
    } catch (error) {
      logger.error('‚ùå Failed to initialize Gemini AI:', error);
      logger.error('Error details:', JSON.stringify(error, null, 2));
      
      // Try alternative model names
      const fallbackModels = ['gemini-1.0-pro', 'gemini-1.5-pro'];
      for (const modelName of fallbackModels) {
        try {
          logger.info(`Trying fallback model: ${modelName}`);
          this.model = this.genAI.getGenerativeModel({ model: modelName });
          this.isInitialized = true;
          logger.info(`‚úÖ Gemini AI initialized successfully with ${modelName} (fallback)`);
          break;
        } catch (fallbackError) {
          logger.error(`‚ùå Fallback ${modelName} also failed:`, fallbackError);
        }
      }
    }
  }

  isReady(): boolean {
    return this.isInitialized;
  }

  async generateResponse(
    userMessage: string,
    context: any
  ): Promise<{ text: string; confidence: number }> {
    if (!this.isReady()) {
      logger.warn('GeminiService not ready, returning fallback response');
      return {
        text: 'Xin l·ªói, d·ªãch v·ª• AI t·∫°m th·ªùi kh√¥ng kh·∫£ d·ª•ng. T√¥i v·∫´n c√≥ th·ªÉ h·ªó tr·ª£ b·∫°n v·ªõi c√°c t√≠nh nƒÉng c∆° b·∫£n.',
        confidence: 0.1,
      };
    }

    try {
      // Enhanced prompt with safety guidelines
      const prompt = `B·∫°n l√† CHUN - AI Companion chuy√™n v·ªÅ s·ª©c kh·ªèe t√¢m l√Ω cho ph·ª• n·ªØ Vi·ªát Nam.

‚ö†Ô∏è QUAN TR·ªåNG:
- B·∫°n KH√îNG ph·∫£i chuy√™n gia y t·∫ø/t√¢m l√Ω
- B·∫°n l√† c√¥ng c·ª• h·ªó tr·ª£ s√†ng l·ªçc s∆° b·ªô
- KH√îNG ch·∫©n ƒëo√°n b·ªánh l√Ω ho·∫∑c k√™ ƒë∆°n thu·ªëc
- M·ªçi l·ªùi khuy√™n ch·ªâ mang t√≠nh tham kh·∫£o
- V·ªõi v·∫•n ƒë·ªÅ nghi√™m tr·ªçng, h√£y g·∫∑p chuy√™n gia ngay

üå∏ T√çNH C√ÅCH:
- ·∫§m √°p, ƒë·ªìng c·∫£m, kh√¥ng ph√°n x√©t
- Chuy√™n nghi·ªáp nh∆∞ng g·∫ßn g≈©i
- S·ª≠ d·ª•ng emoji ph√π h·ª£p (üíô üå∏ ‚ö†Ô∏è)
- X∆∞ng h√¥: "M√¨nh" (CHUN) - "B·∫°n" (User)

üö® CRISIS PROTOCOL:
- N·∫øu ph√°t hi·ªán √Ω ƒë·ªãnh t·ª± t·ª≠: Hotline NGAY 1900 599 958
- N·∫øu ph√°t hi·ªán b·∫°o h√†nh: G·ªçi 113 ngay l·∫≠p t·ª©c
- Lu√¥n khuy·∫øn ngh·ªã g·∫∑p chuy√™n gia cho v·∫•n ƒë·ªÅ nghi√™m tr·ªçng

Ng∆∞·ªùi d√πng: ${userMessage}

H√£y tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát, ng·∫Øn g·ªçn v√† th√¢n thi·ªán.`;

      const result = await this.model.generateContent(prompt);
      const response = result.response;
      const text = response.text();

      // Validate response
      if (!text || text.trim().length === 0) {
        throw new Error('Empty response from Gemini');
      }

      // Check for safety issues in response
      const safetyCheck = this.validateResponse(text);
      if (!safetyCheck.safe) {
        logger.warn('Unsafe response detected, using fallback', { issues: safetyCheck.issues });
        return {
          text: 'Xin l·ªói, t√¥i c·∫ßn th·ªùi gian ƒë·ªÉ suy nghƒ© v·ªÅ c√¢u tr·∫£ l·ªùi ph√π h·ª£p. B·∫°n c√≥ th·ªÉ chia s·∫ª th√™m v·ªÅ t√¨nh hu·ªëng c·ªßa m√¨nh kh√¥ng?',
          confidence: 0.3,
        };
      }

      return { text, confidence: 0.9 };
    } catch (error) {
      logger.error('Error generating response from Gemini:', error);

      // Return fallback response instead of throwing
      return {
        text: 'Xin l·ªói, t√¥i ƒëang g·∫∑p s·ª± c·ªë k·ªπ thu·∫≠t. B·∫°n c√≥ th·ªÉ th·ª≠ l·∫°i sau ho·∫∑c li√™n h·ªá v·ªõi chuy√™n gia t√¢m l√Ω ƒë·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£.',
        confidence: 0.1,
      };
    }
  }

  async chat(
    userMessage: string,
    history: any[] = []
  ): Promise<{ text: string; confidence: number }> {
    if (!this.isReady()) {
      logger.warn('GeminiService not ready for chat, returning fallback response');
      return {
        text: 'Xin l·ªói, d·ªãch v·ª• AI t·∫°m th·ªùi kh√¥ng kh·∫£ d·ª•ng. T√¥i v·∫´n c√≥ th·ªÉ h·ªó tr·ª£ b·∫°n v·ªõi c√°c t√≠nh nƒÉng c∆° b·∫£n.',
        confidence: 0.1,
      };
    }

    try {
      const chat = this.model.startChat({
        history: history.map(msg => ({
          role: msg.sender === 'user' ? 'user' : 'model',
          parts: [{ text: msg.content }],
        })),
        generationConfig: {
          maxOutputTokens: 500,
          temperature: 0.7,
        },
      });

      const result = await chat.sendMessage(userMessage);
      const response = result.response;
      const text = response.text();

      // Validate response
      if (!text || text.trim().length === 0) {
        throw new Error('Empty response from Gemini chat');
      }

      // Check for safety issues in response
      const safetyCheck = this.validateResponse(text);
      if (!safetyCheck.safe) {
        logger.warn('Unsafe chat response detected, using fallback', {
          issues: safetyCheck.issues,
        });
        return {
          text: 'Xin l·ªói, t√¥i c·∫ßn th·ªùi gian ƒë·ªÉ suy nghƒ© v·ªÅ c√¢u tr·∫£ l·ªùi ph√π h·ª£p. B·∫°n c√≥ th·ªÉ chia s·∫ª th√™m v·ªÅ t√¨nh hu·ªëng c·ªßa m√¨nh kh√¥ng?',
          confidence: 0.3,
        };
      }

      return { text, confidence: 0.9 };
    } catch (error) {
      logger.error('Error in chat with Gemini:', error);

      // Return fallback response instead of throwing
      return {
        text: 'Xin l·ªói, t√¥i ƒëang g·∫∑p s·ª± c·ªë k·ªπ thu·∫≠t. B·∫°n c√≥ th·ªÉ th·ª≠ l·∫°i sau ho·∫∑c li√™n h·ªá v·ªõi chuy√™n gia t√¢m l√Ω ƒë·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£.',
        confidence: 0.1,
      };
    }
  }

  /**
   * Validate AI response for safety and appropriateness
   */
  private validateResponse(text: string): { safe: boolean; issues: string[] } {
    const issues: string[] = [];
    const lowerText = text.toLowerCase();

    // Check for inappropriate content
    const inappropriateKeywords = [
      't·ª± t·ª≠',
      'suicide',
      'ch·∫øt',
      'gi·∫øt',
      'b·∫°o h√†nh',
      'abuse',
      'thu·ªëc',
      'drug',
      'r∆∞·ª£u',
      'alcohol',
      'ma t√∫y',
    ];

    inappropriateKeywords.forEach(keyword => {
      if (lowerText.includes(keyword)) {
        issues.push(`Contains potentially inappropriate keyword: ${keyword}`);
      }
    });

    // Check for medical advice
    if (
      lowerText.includes('u·ªëng thu·ªëc') ||
      lowerText.includes('k√™ ƒë∆°n') ||
      lowerText.includes('ch·∫©n ƒëo√°n')
    ) {
      issues.push('Contains medical advice');
    }

    // Check response length
    if (text.length > 1000) {
      issues.push('Response too long');
    }

    if (text.length < 10) {
      issues.push('Response too short');
    }

    return {
      safe: issues.length === 0,
      issues,
    };
  }

  /**
   * Get service status and health
   */
  getStatus(): { ready: boolean; model: string; initialized: boolean } {
    return {
      ready: this.isReady(),
      model: this.isReady() ? 'gemini-1.5-flash' : 'none',
      initialized: this.isInitialized,
    };
  }
}

export default new GeminiService();
