/**
 * Community Support Component
 * Platform for peer support, resources, and professional referrals
 */

import React, { useState } from 'react';
import styled, { keyframes } from 'styled-components';
import AnimatedCard from './AnimatedCard';
import AnimatedButton from './AnimatedButton';
import LoadingSpinner from './LoadingSpinner';
import SelfCareDocuments from './SelfCareDocuments';
import VideoGuides from './VideoGuides';
import EBooks from './EBooks';
import AdvancedChatBot from './AdvancedChatBot';

const fadeInUp = keyframes`
  from {
    opacity: 0;
    transform: translateY(30px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
`;

const CommunityContainer = styled.div`
  max-width: 1200px;
  margin: 0 auto;
  padding: 20px;
  animation: ${fadeInUp} 0.6s ease-out;
`;

const Header = styled.div`
  text-align: center;
  margin-bottom: 40px;
`;

const Title = styled.h1`
  font-size: 2.5rem;
  color: #059669;
  margin-bottom: 15px;
  font-weight: 700;
`;

const Subtitle = styled.p`
  font-size: 1.2rem;
  color: #6b7280;
  max-width: 600px;
  margin: 0 auto;
  line-height: 1.6;
`;

const TabsContainer = styled.div`
  display: flex;
  justify-content: center;
  margin-bottom: 30px;
  border-bottom: 2px solid #e5e7eb;
`;

const Tab = styled.button<{ active: boolean }>`
  padding: 15px 30px;
  border: none;
  background: ${props => props.active ? '#059669' : 'transparent'};
  color: ${props => props.active ? 'white' : '#6b7280'};
  font-size: 1rem;
  font-weight: 600;
  cursor: pointer;
  border-radius: 10px 10px 0 0;
  transition: all 0.3s ease;
  margin-right: 5px;

  &:hover {
    background: ${props => props.active ? '#047857' : '#f3f4f6'};
    color: ${props => props.active ? 'white' : '#374151'};
  }
`;

const ContentSection = styled.div`
  margin-bottom: 40px;
`;

const CardsGrid = styled.div`
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
  gap: 20px;
  margin-bottom: 30px;
`;

const ResourceCard = styled(AnimatedCard)`
  padding: 25px;
  cursor: pointer;
  transition: all 0.3s ease;

  &:hover {
    transform: translateY(-5px);
    box-shadow: 0 10px 25px rgba(0, 0, 0, 0.15);
  }
`;

const ResourceIcon = styled.div`
  font-size: 2.5rem;
  margin-bottom: 15px;
  text-align: center;
`;

const ResourceTitle = styled.h3`
  font-size: 1.3rem;
  color: #1f2937;
  margin-bottom: 10px;
  font-weight: 600;
`;

const ResourceDescription = styled.p`
  color: #6b7280;
  line-height: 1.5;
  margin-bottom: 15px;
`;

const ResourceLink = styled.a`
  color: #059669;
  text-decoration: none;
  font-weight: 500;
  display: inline-flex;
  align-items: center;
  gap: 5px;

  &:hover {
    text-decoration: underline;
  }
`;

const SupportGroup = styled.div`
  background: #f8fafc;
  border-radius: 15px;
  padding: 25px;
  margin-bottom: 20px;
  border-left: 5px solid #059669;
`;

const GroupTitle = styled.h3`
  font-size: 1.4rem;
  color: #1f2937;
  margin-bottom: 10px;
  font-weight: 600;
`;

const GroupDescription = styled.p`
  color: #6b7280;
  line-height: 1.5;
  margin-bottom: 15px;
`;

const GroupStats = styled.div`
  display: flex;
  gap: 20px;
  margin-bottom: 15px;
`;

const Stat = styled.div`
  text-align: center;
`;

const StatNumber = styled.div`
  font-size: 1.5rem;
  font-weight: 700;
  color: #059669;
`;

const StatLabel = styled.div`
  font-size: 0.9rem;
  color: #6b7280;
`;

const EmergencySection = styled.div`
  background: #fef2f2;
  border: 2px solid #fecaca;
  border-radius: 15px;
  padding: 25px;
  margin-bottom: 30px;
`;

const EmergencyTitle = styled.h3`
  color: #dc2626;
  font-size: 1.4rem;
  margin-bottom: 15px;
  font-weight: 600;
`;

const EmergencyText = styled.p`
  color: #7f1d1d;
  line-height: 1.5;
  margin-bottom: 15px;
`;

const EmergencyContacts = styled.div`
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
  gap: 15px;
`;

const EmergencyContact = styled.div`
  background: white;
  border-radius: 10px;
  padding: 15px;
  text-align: center;
  border: 1px solid #fecaca;
`;

const ContactName = styled.div`
  font-weight: 600;
  color: #dc2626;
  margin-bottom: 5px;
`;

const ContactNumber = styled.div`
  font-size: 1.2rem;
  font-weight: 700;
  color: #1f2937;
  margin-bottom: 5px;
`;

const ContactDescription = styled.div`
  font-size: 0.9rem;
  color: #6b7280;
`;

const ProfessionalSection = styled.div`
  background: #eff6ff;
  border-radius: 15px;
  padding: 25px;
  margin-bottom: 30px;
`;

const ProfessionalTitle = styled.h3`
  color: #1e40af;
  font-size: 1.4rem;
  margin-bottom: 15px;
  font-weight: 600;
`;

const ProfessionalList = styled.div`
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
  gap: 15px;
`;

const ProfessionalItem = styled.div`
  background: white;
  border-radius: 10px;
  padding: 20px;
  border: 1px solid #dbeafe;
`;

const ProfessionalName = styled.div`
  font-weight: 600;
  color: #1e40af;
  margin-bottom: 5px;
`;

const ProfessionalSpecialty = styled.div`
  color: #6b7280;
  font-size: 0.9rem;
  margin-bottom: 10px;
`;

const ProfessionalContact = styled.div`
  color: #1f2937;
  font-size: 0.9rem;
`;

const NavigationContainer = styled.div`
  text-align: center;
  margin-top: 40px;
`;

const UpdateBadge = styled.div`
  background: #d4edda;
  color: #155724;
  padding: 8px 12px;
  border-radius: 4px;
  font-size: 0.9rem;
  margin: 10px 0;
  font-weight: bold;
`;

const TechniqueSection = styled.div`
  margin-top: 15px;
`;

const SectionTitle = styled.div`
  font-weight: bold;
  margin-bottom: 10px;
  color: #059669;
  font-size: 0.95rem;
`;

const TechniqueGrid = styled.div`
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
  gap: 8px;
  font-size: 0.85rem;
`;

const TechniqueItem = styled.div`
  background: #f8f9fa;
  padding: 6px 10px;
  border-radius: 4px;
  border: 1px solid #e9ecef;
`;

const MoreInfo = styled.div`
  margin-top: 8px;
  font-size: 0.8rem;
  color: #6c757d;
  font-style: italic;
`;

interface CommunitySupportProps {
  onBack: () => void;
}

type TabType = 'resources' | 'support_groups' | 'professionals' | 'emergency' | 'chatbot';

const CommunitySupport: React.FC<CommunitySupportProps> = ({ onBack }) => {
  const [activeTab, setActiveTab] = useState<TabType>('resources');
  const [isLoading] = useState(false);
  const [currentPage, setCurrentPage] = useState<'main' | 'self_care' | 'videos' | 'ebooks'>('main');

  const resources = [
    {
      id: 1,
      title: 'T√†i li·ªáu t·ª± chƒÉm s√≥c (C·∫≠p nh·∫≠t 2024)',
      description: 'H∆∞·ªõng d·∫´n k·ªπ thu·∫≠t th∆∞ gi√£n, thi·ªÅn ƒë·ªãnh v√† qu·∫£n l√Ω stress m·ªõi nh·∫•t t·ª´ Harvard Medical School, APA 2024',
      icon: 'üìö',
      link: '#',
      type: 'self_care',
      updated: true,
      techniques: [
        'K·ªπ thu·∫≠t th·ªü 4-7-8 (Hi·ªáu qu·∫£ 95%)',
        'Th∆∞ gi√£n c∆° b·∫Øp ti·∫øn b·ªô (PMR)',
        'Grounding 5-4-3-2-1',
        'Thi·ªÅn ch√°nh ni·ªám 2024',
        'Thi·ªÅn t·ª´ bi (Loving-kindness)',
        'Thi·ªÅn body scan',
        'Qu·∫£n l√Ω stress theo ph∆∞∆°ng ph√°p ABC',
        'K·ªπ thu·∫≠t STOP',
        'Journaling tr·ªã li·ªáu',
        'Th·ªü h·ªôp (Box Breathing)',
        'Th·ªü b·ª•ng (Diaphragmatic Breathing)',
        'Th·ªü s√≥ng (Wave Breathing)'
      ]
    },
    {
      id: 2,
      title: 'Video h∆∞·ªõng d·∫´n (2024)',
      description: 'Video h∆∞·ªõng d·∫´n k·ªπ thu·∫≠t th·ªü, yoga v√† mindfulness m·ªõi nh·∫•t t·ª´ c√°c chuy√™n gia qu·ªëc t·∫ø',
      icon: 'üé•',
      link: '#',
      type: 'video',
      updated: true,
      content: [
        'Video th·ªü 4-7-8 v·ªõi h∆∞·ªõng d·∫´n chi ti·∫øt',
        'Yoga cho ph·ª• n·ªØ - 30 ph√∫t m·ªói ng√†y',
        'Mindfulness meditation cho ng∆∞·ªùi m·ªõi b·∫Øt ƒë·∫ßu',
        'Thi·ªÅn body scan - H∆∞·ªõng d·∫´n t·ª´ng b∆∞·ªõc',
        'K·ªπ thu·∫≠t th∆∞ gi√£n c∆° b·∫Øp ti·∫øn b·ªô',
        'Grounding exercises cho lo √¢u'
      ]
    },
    {
      id: 3,
      title: 'S√°ch ƒëi·ªán t·ª≠ (C·∫≠p nh·∫≠t 2024)',
      description: 'Tuy·ªÉn t·∫≠p s√°ch v·ªÅ s·ª©c kh·ªèe t√¢m l√Ω v√† ph√°t tri·ªÉn b·∫£n th√¢n m·ªõi nh·∫•t',
      icon: 'üìñ',
      link: '#',
      type: 'ebook',
      updated: true,
      books: [
        'The Mindful Self-Compassion Workbook (2024)',
        'Breathing Techniques for Stress Relief',
        'Women\'s Mental Health Guide 2024',
        'Cognitive Behavioral Therapy for Anxiety',
        'Mindfulness-Based Stress Reduction',
        'The Science of Well-Being'
      ]
    },
    {
      id: 4,
      title: 'Podcast h·ªó tr·ª£',
      description: 'C√°c podcast chia s·∫ª kinh nghi·ªám v√† l·ªùi khuy√™n t·ª´ chuy√™n gia',
      icon: 'üéß',
      link: '#',
      type: 'podcast'
    },
    {
      id: 5,
      title: '·ª®ng d·ª•ng di ƒë·ªông',
      description: 'Danh s√°ch ·ª©ng d·ª•ng h·ªó tr·ª£ s·ª©c kh·ªèe t√¢m l√Ω ƒë∆∞·ª£c khuy·∫øn ngh·ªã',
      icon: 'üì±',
      link: '#',
      type: 'app'
    },
    {
      id: 6,
      title: 'Kh√≥a h·ªçc tr·ª±c tuy·∫øn',
      description: 'C√°c kh√≥a h·ªçc v·ªÅ k·ªπ nƒÉng s·ªëng v√† qu·∫£n l√Ω c·∫£m x√∫c',
      icon: 'üéì',
      link: '#',
      type: 'course'
    }
  ];

  const supportGroups = [
    {
      id: 1,
      title: 'Nh√≥m h·ªó tr·ª£ ph·ª• n·ªØ',
      description: 'C·ªông ƒë·ªìng ph·ª• n·ªØ chia s·∫ª kinh nghi·ªám v√† h·ªó tr·ª£ l·∫´n nhau',
      members: 1247,
      activeToday: 89,
      nextMeeting: '2024-01-15 19:00'
    },
    {
      id: 2,
      title: 'Nh√≥m cha m·∫π',
      description: 'H·ªó tr·ª£ c√°c b·∫≠c cha m·∫π trong vi·ªác chƒÉm s√≥c s·ª©c kh·ªèe t√¢m l√Ω gia ƒë√¨nh',
      members: 892,
      activeToday: 67,
      nextMeeting: '2024-01-16 20:00'
    },
    {
      id: 3,
      title: 'Nh√≥m sau sinh',
      description: 'H·ªó tr·ª£ ƒë·∫∑c bi·ªát cho c√°c m·∫π sau sinh v√† gia ƒë√¨nh',
      members: 456,
      activeToday: 34,
      nextMeeting: '2024-01-17 18:30'
    }
  ];

  const professionals = [
    {
      id: 1,
      name: 'Dr. Nguy·ªÖn Th·ªã Minh',
      specialty: 'T√¢m l√Ω h·ªçc l√¢m s√†ng',
      contact: '0901 234 567',
      location: 'TP.HCM'
    },
    {
      id: 2,
      name: 'Ths. Tr·∫ßn VƒÉn Nam',
      specialty: 'T∆∞ v·∫•n gia ƒë√¨nh',
      contact: '0902 345 678',
      location: 'H√† N·ªôi'
    },
    {
      id: 3,
      name: 'Bs. L√™ Th·ªã Hoa',
      specialty: 'T√¢m th·∫ßn h·ªçc',
      contact: '0903 456 789',
      location: 'ƒê√† N·∫µng'
    },
    {
      id: 4,
      name: 'Ths. Ph·∫°m VƒÉn ƒê·ª©c',
      specialty: 'T∆∞ v·∫•n h√¥n nh√¢n',
      contact: '0904 567 890',
      location: 'TP.HCM'
    }
  ];

  const emergencyContacts = [
    {
      name: 'T·ªïng ƒë√†i t∆∞ v·∫•n t√¢m l√Ω',
      number: '1900 5999 15',
      description: 'H·ªó tr·ª£ 24/7'
    },
    {
      name: 'C·∫•p c·ª©u y t·∫ø',
      number: '115',
      description: 'Kh·∫©n c·∫•p'
    },
    {
      name: 'B·ªánh vi·ªán T√¢m th·∫ßn TP.HCM',
      number: '028 3930 3316',
      description: 'Chuy√™n khoa'
    },
    {
      name: 'T·ªïng ƒë√†i qu·ªëc gia',
      number: '111',
      description: 'B·∫£o v·ªá tr·∫ª em'
    }
  ];

  const renderResources = () => (
    <ContentSection>
      <CardsGrid>
        {resources.map((resource) => (
          <ResourceCard key={resource.id} hoverEffect="lift">
            <ResourceIcon>{resource.icon}</ResourceIcon>
            <ResourceTitle>{resource.title}</ResourceTitle>
            <ResourceDescription>{resource.description}</ResourceDescription>
            {resource.updated && (
              <UpdateBadge>
                ‚ú® C·∫≠p nh·∫≠t m·ªõi nh·∫•t 2024
              </UpdateBadge>
            )}
            {resource.techniques && (
              <TechniqueSection>
                <SectionTitle>
                  üßò‚Äç‚ôÄÔ∏è K·ªπ thu·∫≠t m·ªõi:
                </SectionTitle>
                <TechniqueGrid>
                  {resource.techniques.slice(0, 6).map((technique, index) => (
                    <TechniqueItem key={index}>
                      ‚Ä¢ {technique}
                    </TechniqueItem>
                  ))}
                </TechniqueGrid>
                {resource.techniques.length > 6 && (
                  <MoreInfo>
                    + {resource.techniques.length - 6} k·ªπ thu·∫≠t kh√°c...
                  </MoreInfo>
                )}
              </TechniqueSection>
            )}
            {resource.content && (
              <TechniqueSection>
                <SectionTitle>
                  üé• N·ªôi dung m·ªõi:
                </SectionTitle>
                <TechniqueGrid>
                  {resource.content.slice(0, 4).map((item, index) => (
                    <TechniqueItem key={index}>
                      ‚Ä¢ {item}
                    </TechniqueItem>
                  ))}
                </TechniqueGrid>
                {resource.content.length > 4 && (
                  <MoreInfo>
                    + {resource.content.length - 4} video kh√°c...
                  </MoreInfo>
                )}
              </TechniqueSection>
            )}
            {resource.books && (
              <TechniqueSection>
                <SectionTitle>
                  üìö S√°ch m·ªõi:
                </SectionTitle>
                <TechniqueGrid>
                  {resource.books.slice(0, 4).map((book, index) => (
                    <TechniqueItem key={index}>
                      ‚Ä¢ {book}
                    </TechniqueItem>
                  ))}
                </TechniqueGrid>
                {resource.books.length > 4 && (
                  <MoreInfo>
                    + {resource.books.length - 4} s√°ch kh√°c...
                  </MoreInfo>
                )}
              </TechniqueSection>
            )}
            <ResourceLink 
              href="#"
              onClick={(e) => {
                e.preventDefault();
                if (resource.type === 'self_care') {
                  setCurrentPage('self_care');
                } else if (resource.type === 'video') {
                  setCurrentPage('videos');
                } else if (resource.type === 'ebook') {
                  setCurrentPage('ebooks');
                }
              }}
            >
              Xem chi ti·∫øt ‚Üí
            </ResourceLink>
          </ResourceCard>
        ))}
      </CardsGrid>
    </ContentSection>
  );

  const renderSupportGroups = () => (
    <ContentSection>
      {supportGroups.map((group) => (
        <SupportGroup key={group.id}>
          <GroupTitle>{group.title}</GroupTitle>
          <GroupDescription>{group.description}</GroupDescription>
          <GroupStats>
            <Stat>
              <StatNumber>{group.members.toLocaleString()}</StatNumber>
              <StatLabel>Th√†nh vi√™n</StatLabel>
            </Stat>
            <Stat>
              <StatNumber>{group.activeToday}</StatNumber>
              <StatLabel>Ho·∫°t ƒë·ªông h√¥m nay</StatLabel>
            </Stat>
            <Stat>
              <StatNumber>{group.nextMeeting}</StatNumber>
              <StatLabel>Cu·ªôc h·ªçp ti·∫øp theo</StatLabel>
            </Stat>
          </GroupStats>
          <AnimatedButton
            variant="primary"
            size="small"
            icon="üë•"
          >
            Tham gia nh√≥m
          </AnimatedButton>
        </SupportGroup>
      ))}
    </ContentSection>
  );

  const renderProfessionals = () => (
    <ContentSection>
      <ProfessionalSection>
        <ProfessionalTitle>üë®‚Äç‚öïÔ∏è Chuy√™n gia t∆∞ v·∫•n</ProfessionalTitle>
        <ProfessionalList>
          {professionals.map((professional) => (
            <ProfessionalItem key={professional.id}>
              <ProfessionalName>{professional.name}</ProfessionalName>
              <ProfessionalSpecialty>{professional.specialty}</ProfessionalSpecialty>
              <ProfessionalContact>
                üìû {professional.contact}<br />
                üìç {professional.location}
              </ProfessionalContact>
            </ProfessionalItem>
          ))}
        </ProfessionalList>
      </ProfessionalSection>
    </ContentSection>
  );

  const renderEmergency = () => (
    <ContentSection>
      <EmergencySection>
        <EmergencyTitle>üö® Li√™n h·ªá kh·∫©n c·∫•p</EmergencyTitle>
        <EmergencyText>
          N·∫øu b·∫°n ƒëang g·∫∑p kh·ªßng ho·∫£ng t√¢m l√Ω ho·∫∑c c√≥ √Ω ƒë·ªãnh t·ª± h·∫°i, 
          h√£y li√™n h·ªá ngay v·ªõi c√°c d·ªãch v·ª• h·ªó tr·ª£ kh·∫©n c·∫•p d∆∞·ªõi ƒë√¢y:
        </EmergencyText>
        <EmergencyContacts>
          {emergencyContacts.map((contact, index) => (
            <EmergencyContact key={index}>
              <ContactName>{contact.name}</ContactName>
              <ContactNumber>{contact.number}</ContactNumber>
              <ContactDescription>{contact.description}</ContactDescription>
            </EmergencyContact>
          ))}
        </EmergencyContacts>
      </EmergencySection>
    </ContentSection>
  );

  const renderContent = () => {
    // Render multi-page components
    if (currentPage === 'self_care') {
      return <SelfCareDocuments onBack={() => setCurrentPage('main')} />;
    }
    
    if (currentPage === 'videos') {
      return <VideoGuides onBack={() => setCurrentPage('main')} />;
    }
    
    if (currentPage === 'ebooks') {
      return <EBooks onBack={() => setCurrentPage('main')} />;
    }
    
    if (activeTab === 'chatbot') {
      return <AdvancedChatBot onBack={onBack} />;
    }

    // Render main tabs
    switch (activeTab) {
      case 'resources':
        return renderResources();
      case 'support_groups':
        return renderSupportGroups();
      case 'professionals':
        return renderProfessionals();
      case 'emergency':
        return renderEmergency();
      default:
        return renderResources();
    }
  };

  return (
    <CommunityContainer>
      {currentPage === 'main' && (
        <>
          <Header>
            <Title>ü§ù Community Support</Title>
            <Subtitle>
              C·ªông ƒë·ªìng h·ªó tr·ª£, t√†i nguy√™n v√† k·∫øt n·ªëi chuy√™n gia cho s·ª©c kh·ªèe t√¢m l√Ω
            </Subtitle>
          </Header>

          <TabsContainer>
            <Tab
              active={activeTab === 'resources'}
              onClick={() => setActiveTab('resources')}
            >
              üìö T√†i nguy√™n
            </Tab>
            <Tab
              active={activeTab === 'support_groups'}
              onClick={() => setActiveTab('support_groups')}
            >
              üë• Nh√≥m h·ªó tr·ª£
            </Tab>
            <Tab
              active={activeTab === 'professionals'}
              onClick={() => setActiveTab('professionals')}
            >
              üë®‚Äç‚öïÔ∏è Chuy√™n gia
            </Tab>
        <Tab
          active={activeTab === 'emergency'}
          onClick={() => setActiveTab('emergency')}
        >
          üö® Kh·∫©n c·∫•p
        </Tab>
        <Tab
          active={activeTab === 'chatbot'}
          onClick={() => setActiveTab('chatbot')}
        >
          ü§ñ Tr·ª£ l√Ω AI
        </Tab>
          </TabsContainer>
        </>
      )}

      {renderContent()}

      {currentPage === 'main' && (
        <NavigationContainer>
          <AnimatedButton
            variant="secondary"
            onClick={onBack}
            icon="‚Üê"
          >
            Quay l·∫°i Dashboard
          </AnimatedButton>
        </NavigationContainer>
      )}

      {isLoading && (
        <LoadingSpinner
          type="dots"
          text="ƒêang t·∫£i th√¥ng tin..."
          fullScreen={false}
        />
      )}
    </CommunityContainer>
  );
};

export default CommunitySupport;



