/**
 * Component X√°c nh·∫≠n ƒë·ªìng √Ω tham gia kh·∫£o s√°t - VERSION 2
 * Thu th·∫≠p th√¥ng tin c∆° b·∫£n m·ªôt c√°ch t·ª± nhi√™n trong qu√° tr√¨nh ƒë·ªìng √Ω
 */

import React, { useState } from 'react';
import styled from 'styled-components';
import { demographicsService } from '../services/demographicsService';

// ================================
// STYLED COMPONENTS
// ================================

const Container = styled.div`
  max-width: 800px;
  margin: 0 auto;
  padding: 2rem;
  font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
  line-height: 1.6;
  color: #333;
  background: linear-gradient(135deg, #fef7f7 0%, #fff5f5 100%);
  min-height: 100vh;
`;

const Header = styled.div`
  text-align: center;
  margin-bottom: 2rem;
`;

const Title = styled.h1`
  color: #d63384;
  font-size: 2.5rem;
  font-weight: 300;
  margin-bottom: 1rem;
`;

const Subtitle = styled.p`
  color: #6c757d;
  font-size: 1.2rem;
`;

const Card = styled.div`
  background: white;
  border-radius: 15px;
  padding: 2rem;
  box-shadow: 0 10px 30px rgba(0,0,0,0.1);
  margin-bottom: 2rem;
`;

const SectionTitle = styled.h3`
  color: #d63384;
  font-size: 1.5rem;
  margin-bottom: 1rem;
  border-bottom: 2px solid #f8d7da;
  padding-bottom: 0.5rem;
`;

const DemographicsForm = styled.div<{ hasSelection: boolean }>`
  background: ${props => props.hasSelection ? '#e8f5e8' : '#fff3cd'};
  border: 2px solid ${props => props.hasSelection ? '#4caf50' : '#ffc107'};
  border-radius: 10px;
  padding: 1.5rem;
  margin: 1rem 0;
  transition: all 0.3s ease;
`;

const FormRow = styled.div`
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
  gap: 1rem;
  margin-bottom: 1rem;
`;

const FormGroup = styled.div`
  display: flex;
  flex-direction: column;
`;

const Label = styled.label`
  font-weight: 600;
  margin-bottom: 0.5rem;
  color: #495057;
`;

const Select = styled.select`
  padding: 0.75rem;
  border: 2px solid #e9ecef;
  border-radius: 8px;
  font-size: 1rem;
  background: white;
  transition: border-color 0.3s ease;

  &:focus {
    outline: none;
    border-color: #d63384;
  }
`;

const CheckboxContainer = styled.div`
  display: flex;
  align-items: flex-start;
  gap: 0.75rem;
  margin: 1.5rem 0;
  padding: 1rem;
  background: #f8f9fa;
  border-radius: 10px;
`;

const Checkbox = styled.input`
  width: 20px;
  height: 20px;
  accent-color: #d63384;
  margin-top: 0.25rem;
`;

const CheckboxText = styled.span`
  font-size: 0.95rem;
  line-height: 1.5;
  color: #495057;
`;

const Button = styled.button<{ disabled?: boolean }>`
  background: ${props => props.disabled ? '#6c757d' : '#d63384'};
  color: white;
  border: none;
  padding: 1rem 2rem;
  border-radius: 10px;
  font-size: 1.1rem;
  font-weight: 600;
  cursor: ${props => props.disabled ? 'not-allowed' : 'pointer'};
  transition: all 0.3s ease;
  width: 100%;
  margin-top: 1rem;

  &:hover:not(:disabled) {
    background: #c02a5c;
    transform: translateY(-2px);
    box-shadow: 0 5px 15px rgba(214, 51, 132, 0.3);
  }
`;

const ErrorMessage = styled.div`
  color: #dc3545;
  background: #f8d7da;
  border: 1px solid #f5c6cb;
  border-radius: 8px;
  padding: 1rem;
  margin: 1rem 0;
`;

const SuccessMessage = styled.div`
  color: #155724;
  background: #d4edda;
  border: 1px solid #c3e6cb;
  border-radius: 8px;
  padding: 1rem;
  margin: 1rem 0;
`;

const PrivacyNotice = styled.div`
  background: #e8f5e8;
  border: 2px solid #4caf50;
  border-radius: 10px;
  padding: 1rem;
  margin: 1rem 0;
  color: #2e7d32;
  font-weight: 600;
  text-align: center;
`;

const BackButton = styled.button`
  background: white;
  color: #d63384;
  border: 2px solid #d63384;
  padding: 0.8rem 2rem;
  border-radius: 10px;
  font-size: 1rem;
  font-weight: 600;
  cursor: pointer;
  transition: all 0.3s ease;
  margin-top: 1rem;
  
  &:hover {
    background: #d63384;
    color: white;
    transform: translateY(-2px);
    box-shadow: 0 5px 15px rgba(214, 51, 132, 0.3);
  }
  
  &:active {
    transform: translateY(0);
  }
`;

// ================================
// INTERFACES
// ================================

interface ConsentFormProps {
  onConsentGiven: (consentId: string) => void;
  onBack?: () => void;
}

// ================================
// COMPONENT
// ================================

const ConsentFormV2: React.FC<ConsentFormProps> = ({ onConsentGiven, onBack }) => {
  const [demographics, setDemographics] = useState({
    ageRange: '',
    gender: '',
    location: ''
  });
  const [agreed, setAgreed] = useState(false);
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [error, setError] = useState<string | null>(null);

  // Ki·ªÉm tra xem c√≥ th√¥ng tin n√†o ƒë∆∞·ª£c ch·ªçn kh√¥ng
  const hasSelection = !!(demographics.ageRange || demographics.gender || demographics.location);

  const handleSubmit = async () => {
    if (!agreed) {
      setError('Vui l√≤ng ƒë·ªìng √Ω tham gia kh·∫£o s√°t');
      return;
    }

    // Ki·ªÉm tra b·∫Øt bu·ªôc ch·ªçn √≠t nh·∫•t m·ªôt th√¥ng tin
    if (!demographics.ageRange && !demographics.gender && !demographics.location) {
      setError('Vui l√≤ng ch·ªçn √≠t nh·∫•t m·ªôt th√¥ng tin c∆° b·∫£n ƒë·ªÉ tham gia nghi√™n c·ª©u');
      return;
    }

    setIsSubmitting(true);
    setError(null);

    try {
      // T·∫°o consent ID
      const consentId = `consent_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
      
      // L∆∞u demographics n·∫øu c√≥
      if (demographics.ageRange || demographics.gender || demographics.location) {
        const demographicsData = {
          id: `demo_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
          ageRange: (demographics.ageRange || 'prefer_not_to_say') as 'prefer_not_to_say' | '18-25' | '26-35' | '36-45' | '46-55' | '55+',
          gender: (demographics.gender || 'prefer_not_to_say') as 'prefer_not_to_say' | 'male' | 'female' | 'non_binary',
          location: (demographics.location || 'prefer_not_to_say') as 'prefer_not_to_say' | 'urban' | 'rural',
          education: 'prefer_not_to_say' as 'prefer_not_to_say' | 'high_school' | 'college' | 'graduate',
          occupation: 'prefer_not_to_say' as 'prefer_not_to_say' | 'student' | 'employed' | 'unemployed' | 'retired',
          maritalStatus: 'prefer_not_to_say' as 'prefer_not_to_say' | 'single' | 'married' | 'divorced' | 'widowed',
          hasChildren: null as boolean | null,
          consentGiven: true,
          consentDate: new Date(),
          dataRetentionPeriod: 2555, // 7 years
          canBeDeleted: true
        };
        
        demographicsService.saveDemographics(demographicsData);
      }

      // L∆∞u consent
      localStorage.setItem('consentId', consentId);
      localStorage.setItem('consentDate', new Date().toISOString());
      
      onConsentGiven(consentId);
    } catch (error) {
      console.error('Error submitting consent:', error);
      setError('C√≥ l·ªói x·∫£y ra. Vui l√≤ng th·ª≠ l·∫°i.');
    } finally {
      setIsSubmitting(false);
    }
  };

  return (
    <Container>
      <Header>
        <Title>üå∏ Ch√†o m·ª´ng ƒë·∫øn v·ªõi SoulFriend</Title>
        <Subtitle>Nghi√™n c·ª©u s·ª©c kh·ªèe t√¢m l√Ω ph·ª• n·ªØ Vi·ªát Nam</Subtitle>
      </Header>

      <Card>
        <SectionTitle>üìã Th√¥ng tin nghi√™n c·ª©u</SectionTitle>
        <p>
          Ch√∫ng t√¥i ƒëang th·ª±c hi·ªán nghi√™n c·ª©u v·ªÅ s·ª©c kh·ªèe t√¢m l√Ω c·ªßa ph·ª• n·ªØ Vi·ªát Nam. 
          Nghi√™n c·ª©u n√†y nh·∫±m hi·ªÉu r√µ h∆°n v·ªÅ c√°c v·∫•n ƒë·ªÅ s·ª©c kh·ªèe t√¢m l√Ω v√† ph√°t tri·ªÉn 
          c√°c c√¥ng c·ª• h·ªó tr·ª£ ph√π h·ª£p.
        </p>
        
        <p>
          <strong>Th·ªùi gian tham gia:</strong> Kho·∫£ng 10-15 ph√∫t<br/>
          <strong>Ph∆∞∆°ng th·ª©c:</strong> Tr·∫£ l·ªùi c√°c c√¢u h·ªèi tr·ª±c tuy·∫øn<br/>
          <strong>B·∫£o m·∫≠t:</strong> Th√¥ng tin c·ªßa b·∫°n ƒë∆∞·ª£c m√£ h√≥a v√† b·∫£o m·∫≠t tuy·ªát ƒë·ªëi
        </p>
      </Card>

      <Card>
        <SectionTitle>üë§ Th√¥ng tin c∆° b·∫£n (b·∫Øt bu·ªôc)</SectionTitle>
        <p style={{ color: '#d63384', marginBottom: '1rem', fontWeight: '600' }}>
          ‚ö†Ô∏è ƒê·ªÉ tham gia nghi√™n c·ª©u, vui l√≤ng cung c·∫•p √≠t nh·∫•t m·ªôt th√¥ng tin c∆° b·∫£n b√™n d∆∞·ªõi.
        </p>
        <p style={{ color: '#6c757d', marginBottom: '1rem' }}>
          Th√¥ng tin n√†y gi√∫p ch√∫ng t√¥i c·∫£i thi·ªán ch·∫•t l∆∞·ª£ng nghi√™n c·ª©u v√† ph√°t tri·ªÉn 
          c√°c c√¥ng c·ª• h·ªó tr·ª£ ph√π h·ª£p v·ªõi t·ª´ng nh√≥m ƒë·ªëi t∆∞·ª£ng.
        </p>
        
        <DemographicsForm hasSelection={hasSelection}>
          {hasSelection ? (
            <div style={{ color: '#4caf50', fontWeight: '600', marginBottom: '1rem', textAlign: 'center' }}>
              ‚úÖ ƒê√£ ch·ªçn th√¥ng tin c∆° b·∫£n - C√≥ th·ªÉ ti·∫øp t·ª•c
            </div>
          ) : (
            <div style={{ color: '#ff9800', fontWeight: '600', marginBottom: '1rem', textAlign: 'center' }}>
              ‚ö†Ô∏è Vui l√≤ng ch·ªçn √≠t nh·∫•t m·ªôt th√¥ng tin ƒë·ªÉ ti·∫øp t·ª•c
            </div>
          )}
          <FormRow>
            <FormGroup>
              <Label htmlFor="age-range-select">Nh√≥m tu·ªïi:</Label>
              <Select 
                id="age-range-select"
                title="Ch·ªçn nh√≥m tu·ªïi"
                value={demographics.ageRange} 
                onChange={(e) => setDemographics(prev => ({...prev, ageRange: e.target.value}))}
                aria-label="Ch·ªçn nh√≥m tu·ªïi"
              >
                <option value="">Ch·ªçn nh√≥m tu·ªïi</option>
                <option value="18-25">18-25 tu·ªïi</option>
                <option value="26-35">26-35 tu·ªïi</option>
                <option value="36-45">36-45 tu·ªïi</option>
                <option value="46-55">46-55 tu·ªïi</option>
                <option value="55+">Tr√™n 55 tu·ªïi</option>
                <option value="prefer_not_to_say">Kh√¥ng mu·ªën cung c·∫•p</option>
              </Select>
            </FormGroup>
            
            <FormGroup>
              <Label htmlFor="gender-select">Gi·ªõi t√≠nh:</Label>
              <Select 
                id="gender-select"
                title="Ch·ªçn gi·ªõi t√≠nh"
                value={demographics.gender} 
                onChange={(e) => setDemographics(prev => ({...prev, gender: e.target.value}))}
                aria-label="Ch·ªçn gi·ªõi t√≠nh"
              >
                <option value="">Ch·ªçn gi·ªõi t√≠nh</option>
                <option value="male">Nam</option>
                <option value="female">N·ªØ</option>
                <option value="non_binary">Kh√°c</option>
                <option value="prefer_not_to_say">Kh√¥ng mu·ªën cung c·∫•p</option>
              </Select>
            </FormGroup>
            
            <FormGroup>
              <Label htmlFor="location-select">N∆°i sinh s·ªëng:</Label>
              <Select 
                id="location-select"
                title="Ch·ªçn n∆°i sinh s·ªëng"
                value={demographics.location} 
                onChange={(e) => setDemographics(prev => ({...prev, location: e.target.value}))}
                aria-label="Ch·ªçn n∆°i sinh s·ªëng"
              >
                <option value="">Ch·ªçn n∆°i sinh s·ªëng</option>
                <option value="urban">Th√†nh th·ªã</option>
                <option value="rural">N√¥ng th√¥n</option>
                <option value="prefer_not_to_say">Kh√¥ng mu·ªën cung c·∫•p</option>
              </Select>
            </FormGroup>
          </FormRow>
        </DemographicsForm>
      </Card>

      <Card>
        <SectionTitle>üîí Cam k·∫øt b·∫£o m·∫≠t</SectionTitle>
        <ul style={{ paddingLeft: '1.5rem' }}>
          <li>Th√¥ng tin c√° nh√¢n ƒë∆∞·ª£c m√£ h√≥a v√† b·∫£o m·∫≠t tuy·ªát ƒë·ªëi</li>
          <li>D·ªØ li·ªáu ch·ªâ s·ª≠ d·ª•ng cho m·ª•c ƒë√≠ch nghi√™n c·ª©u khoa h·ªçc</li>
          <li>Kh√¥ng chia s·∫ª th√¥ng tin v·ªõi b√™n th·ª© ba</li>
          <li>B·∫°n c√≥ th·ªÉ y√™u c·∫ßu x√≥a d·ªØ li·ªáu b·∫•t k·ª≥ l√∫c n√†o</li>
          <li>Tham gia ho√†n to√†n t·ª± nguy·ªán v√† mi·ªÖn ph√≠</li>
        </ul>
      </Card>

      <CheckboxContainer>
        <Checkbox
          type="checkbox"
          checked={agreed}
          onChange={(e) => setAgreed(e.target.checked)}
        />
        <CheckboxText>
          T√¥i ƒë√£ ƒë·ªçc v√† hi·ªÉu r√µ c√°c th√¥ng tin tr√™n. T√¥i ƒë·ªìng √Ω tham gia nghi√™n c·ª©u n√†y 
          v·ªõi s·ª± hi·ªÉu bi·∫øt r·∫±ng th√¥ng tin c·ªßa t√¥i s·∫Ω ƒë∆∞·ª£c b·∫£o m·∫≠t v√† ch·ªâ s·ª≠ d·ª•ng cho 
          m·ª•c ƒë√≠ch nghi√™n c·ª©u. T√¥i hi·ªÉu r·∫±ng vi·ªác tham gia ho√†n to√†n t·ª± nguy·ªán v√† 
          t√¥i c√≥ th·ªÉ r√∫t kh·ªèi nghi√™n c·ª©u b·∫•t c·ª© l√∫c n√†o.
        </CheckboxText>
      </CheckboxContainer>

      {error && <ErrorMessage>{error}</ErrorMessage>}

      <PrivacyNotice>
        üõ°Ô∏è Th√¥ng tin c·ªßa b·∫°n ƒë∆∞·ª£c b·∫£o v·ªá b·ªüi c√°c ti√™u chu·∫©n b·∫£o m·∫≠t qu·ªëc t·∫ø
      </PrivacyNotice>

      <Button 
        onClick={handleSubmit} 
        disabled={!agreed || !hasSelection || isSubmitting}
      >
        {isSubmitting ? 'ƒêang x·ª≠ l√Ω...' : 
         !hasSelection ? 'Vui l√≤ng ch·ªçn th√¥ng tin c∆° b·∫£n' :
         'ƒê·ªìng √Ω tham gia nghi√™n c·ª©u'}
      </Button>
      
      {onBack && (
        <div style={{ textAlign: 'center' }}>
          <BackButton onClick={onBack}>
            ‚Üê Quay l·∫°i trang ch·ªß
          </BackButton>
        </div>
      )}
    </Container>
  );
};

export default ConsentFormV2;
