/**
 * Component hi·ªÉn th·ªã v√† th·ª±c hi·ªán b√†i test DASS-21
 * DASS-21: Depression, Anxiety and Stress Scale
 */

import React, { useState } from 'react';
import styled from 'styled-components';

// C√¢u h·ªèi DASS-21 (b·∫£n ti·∫øng Vi·ªát)
const dass21Questions = [
  "T√¥i c·∫£m th·∫•y kh√≥ th∆∞ gi√£n",
  "T√¥i nh·∫≠n ra mi·ªáng kh√¥",
  "T√¥i c·∫£m th·∫•y kh√¥ng tr·∫£i nghi·ªám ƒë∆∞·ª£c c·∫£m x√∫c t√≠ch c·ª±c",
  "T√¥i g·∫∑p kh√≥ khƒÉn trong vi·ªác th·ªü (th·ªü nhanh, kh√≥ th·ªü khi kh√¥ng g·∫Øng s·ª©c)",
  "T√¥i c·∫£m th·∫•y kh√≥ b·∫Øt ƒë·∫ßu l√†m vi·ªác",
  "T√¥i c√≥ xu h∆∞·ªõng ph·∫£n ·ª©ng th√°i qu√° v·ªõi c√°c t√¨nh hu·ªëng",
  "T√¥i b·ªã run, rung (v√≠ d·ª•: ·ªü tay)",
  "T√¥i c·∫£m th·∫•y m√¨nh ƒëang ti√™u t·ªën r·∫•t nhi·ªÅu nƒÉng l∆∞·ª£ng th·∫ßn kinh",
  "T√¥i lo l·∫Øng v·ªÅ nh·ªØng t√¨nh hu·ªëng m√† m√¨nh c√≥ th·ªÉ ho·∫£ng s·ª£ v√† l√†m cho m√¨nh tr√¥ng ng·ªõ ng·∫©n",
  "T√¥i c·∫£m th·∫•y r·∫±ng m√¨nh kh√¥ng c√≥ g√¨ ƒë·ªÉ mong ƒë·ª£i",
  "T√¥i c·∫£m th·∫•y b·∫£n th√¢n b·ªã k√≠ch ƒë·ªông",
  "T√¥i c·∫£m th·∫•y kh√≥ th∆∞ gi√£n",
  "T√¥i c·∫£m th·∫•y bu·ªìn b√£ v√† ch√°n n·∫£n",
  "T√¥i kh√¥ng th·ªÉ ch·ªãu ƒë·ª±ng ƒë∆∞·ª£c m·ªçi th·ª© c·∫£n tr·ªü vi·ªác m√¨nh ƒëang l√†m",
  "T√¥i c·∫£m th·∫•y g·∫ßn nh∆∞ ho·∫£ng s·ª£",
  "T√¥i kh√¥ng th·ªÉ h√†o h·ª©ng v·ªõi b·∫•t c·ª© ƒëi·ªÅu g√¨",
  "T√¥i c·∫£m th·∫•y m√¨nh kh√¥ng x·ª©ng ƒë√°ng l√†m ng∆∞·ªùi",
  "T√¥i c·∫£m th·∫•y kh√° nh·∫°y c·∫£m",
  "T√¥i nh·∫≠n ra r·∫±ng tim ƒë·∫≠p nhanh m√† kh√¥ng g·∫Øng s·ª©c (v√≠ d·ª•: ƒë·∫≠p nhanh, nh·ªãp tim kh√¥ng ƒë·ªÅu)",
  "T√¥i c·∫£m th·∫•y s·ª£ h√£i m√† kh√¥ng c√≥ l√Ω do ch√≠nh ƒë√°ng",
  "T√¥i c·∫£m th·∫•y cu·ªôc s·ªëng kh√¥ng c√≥ √Ω nghƒ©a"
];

// C√°c t√πy ch·ªçn tr·∫£ l·ªùi
const answerOptions = [
  { value: 0, label: "Kh√¥ng bao gi·ªù", description: "Kh√¥ng √°p d·ª•ng cho t√¥i" },
  { value: 1, label: "Th·ªânh tho·∫£ng", description: "√Åp d·ª•ng cho t√¥i ·ªü m·ªôt m·ª©c ƒë·ªô n√†o ƒë√≥, ho·∫∑c ƒë√¥i khi" },
  { value: 2, label: "Th∆∞·ªùng xuy√™n", description: "√Åp d·ª•ng cho t√¥i ·ªü m·ª©c ƒë·ªô ƒë√°ng k·ªÉ, ho·∫∑c ph·∫ßn l·ªõn th·ªùi gian" },
  { value: 3, label: "R·∫•t th∆∞·ªùng xuy√™n", description: "√Åp d·ª•ng cho t√¥i r·∫•t nhi·ªÅu, ho·∫∑c h·∫ßu h·∫øt th·ªùi gian" }
];

// Styled Components
const Container = styled.div`
  max-width: 800px;
  margin: 0 auto;
  padding: 40px 20px;
  background: linear-gradient(135deg, #fef7f7 0%, #fff5f5 100%);
  min-height: 100vh;
`;

const Header = styled.div`
  text-align: center;
  margin-bottom: 40px;
`;

const Title = styled.h1`
  color: #d63384;
  font-size: 2rem;
  font-weight: 500;
  margin-bottom: 10px;
`;

const Subtitle = styled.p`
  color: #6c757d;
  font-size: 1.1rem;
  line-height: 1.6;
  max-width: 600px;
  margin: 0 auto;
`;

const ProgressBar = styled.div`
  background: #e9ecef;
  height: 8px;
  border-radius: 4px;
  margin: 30px 0;
  overflow: hidden;
`;

const ProgressFill = styled.div<{ progress: number }>`
  background: linear-gradient(90deg, #d63384, #e91e63);
  height: 100%;
  width: ${props => props.progress}%;
  transition: width 0.3s ease;
`;

const ProgressText = styled.div`
  text-align: center;
  color: #6c757d;
  font-size: 0.9rem;
  margin-top: 10px;
`;

const QuestionCard = styled.div`
  background: white;
  border-radius: 15px;
  padding: 30px;
  margin-bottom: 30px;
  box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
`;

const QuestionNumber = styled.div`
  color: #d63384;
  font-size: 0.9rem;
  font-weight: 600;
  margin-bottom: 10px;
`;

const QuestionText = styled.h3`
  color: #495057;
  font-size: 1.2rem;
  font-weight: 500;
  line-height: 1.5;
  margin-bottom: 25px;
`;

const AnswerOptions = styled.div`
  display: flex;
  flex-direction: column;
  gap: 12px;
`;

const AnswerOption = styled.label<{ isSelected: boolean }>`
  display: flex;
  align-items: flex-start;
  padding: 15px 20px;
  border: 2px solid ${props => props.isSelected ? '#d63384' : '#e9ecef'};
  border-radius: 10px;
  cursor: pointer;
  transition: all 0.3s ease;
  background: ${props => props.isSelected ? '#fef7f7' : 'white'};
  
  &:hover {
    border-color: #d63384;
    background: #fef7f7;
  }
`;

const RadioInput = styled.input`
  margin-right: 15px;
  margin-top: 2px;
  accent-color: #d63384;
`;

const AnswerLabel = styled.div`
  flex: 1;
`;

const AnswerTitle = styled.div`
  font-weight: 600;
  color: #495057;
  margin-bottom: 5px;
`;

const AnswerDescription = styled.div`
  font-size: 0.9rem;
  color: #6c757d;
  line-height: 1.4;
`;

const NavigationButtons = styled.div`
  display: flex;
  justify-content: space-between;
  margin-top: 40px;
`;

const Button = styled.button<{ variant: 'primary' | 'secondary'; disabled?: boolean }>`
  padding: 12px 25px;
  border: none;
  border-radius: 25px;
  font-size: 1rem;
  font-weight: 600;
  cursor: ${props => props.disabled ? 'not-allowed' : 'pointer'};
  transition: all 0.3s ease;
  
  ${props => props.variant === 'primary' ? `
    background: ${props.disabled ? '#e9ecef' : 'linear-gradient(135deg, #d63384 0%, #e91e63 100%)'};
    color: ${props.disabled ? '#6c757d' : 'white'};
    box-shadow: ${props.disabled ? 'none' : '0 4px 12px rgba(214, 51, 132, 0.3)'};
    
    &:hover {
      transform: ${props.disabled ? 'none' : 'translateY(-2px)'};
      box-shadow: ${props.disabled ? 'none' : '0 6px 16px rgba(214, 51, 132, 0.4)'};
    }
  ` : `
    background: white;
    color: #6c757d;
    border: 2px solid #e9ecef;
    
    &:hover {
      background: #f8f9fa;
      border-color: #d63384;
      color: #d63384;
    }
  `}
`;

// Props interface
interface DASS21TestProps {
  onComplete: (answers: number[]) => void;
  onBack: () => void;
}

const DASS21Test: React.FC<DASS21TestProps> = ({ onComplete, onBack }) => {
  const [currentQuestion, setCurrentQuestion] = useState(0);
  const [answers, setAnswers] = useState<number[]>(new Array(dass21Questions.length).fill(-1));

  /**
   * X·ª≠ l√Ω khi ng∆∞·ªùi d√πng ch·ªçn c√¢u tr·∫£ l·ªùi
   */
  const handleAnswerSelect = (answerValue: number) => {
    const newAnswers = [...answers];
    newAnswers[currentQuestion] = answerValue;
    setAnswers(newAnswers);
  };

  /**
   * Chuy·ªÉn ƒë·∫øn c√¢u h·ªèi ti·∫øp theo
   */
  const handleNext = () => {
    if (currentQuestion < dass21Questions.length - 1) {
      setCurrentQuestion(currentQuestion + 1);
    }
  };

  /**
   * Quay l·∫°i c√¢u h·ªèi tr∆∞·ªõc
   */
  const handlePrevious = () => {
    if (currentQuestion > 0) {
      setCurrentQuestion(currentQuestion - 1);
    }
  };

  /**
   * Ho√†n th√†nh b√†i test
   */
  const handleComplete = () => {
    // Chuy·ªÉn ƒë·ªïi -1 th√†nh 0 cho nh·ªØng c√¢u ch∆∞a tr·∫£ l·ªùi
    const finalAnswers = answers.map(answer => answer === -1 ? 0 : answer);
    onComplete(finalAnswers);
  };

  /**
   * Ki·ªÉm tra c√≥ th·ªÉ ti·∫øp t·ª•c kh√¥ng
   */
  const canProceed = answers[currentQuestion] !== -1;
  const isLastQuestion = currentQuestion === dass21Questions.length - 1;
  const progress = ((currentQuestion + 1) / dass21Questions.length) * 100;

  return (
    <Container>
      <Header>
        <Title>üß† Thang ƒëo DASS-21</Title>
        <Subtitle>
          Vui l√≤ng ƒë·ªçc t·ª´ng c√¢u v√† ch·ªçn m·ª©c ƒë·ªô m√† n√≥ √°p d·ª•ng cho b·∫°n trong <strong>tu·∫ßn qua</strong>. 
          Kh√¥ng c√≥ c√¢u tr·∫£ l·ªùi ƒë√∫ng hay sai. ƒê·ª´ng d√†nh qu√° nhi·ªÅu th·ªùi gian cho m·ªói c√¢u.
        </Subtitle>
      </Header>

      <ProgressBar>
        <ProgressFill progress={progress} />
      </ProgressBar>
      <ProgressText>
        C√¢u {currentQuestion + 1} / {dass21Questions.length}
      </ProgressText>

      <QuestionCard>
        <QuestionNumber>
          C√¢u h·ªèi {currentQuestion + 1}/{dass21Questions.length}
        </QuestionNumber>
        <QuestionText>
          {dass21Questions[currentQuestion]}
        </QuestionText>

        <AnswerOptions>
          {answerOptions.map((option) => (
            <AnswerOption
              key={option.value}
              isSelected={answers[currentQuestion] === option.value}
            >
              <RadioInput
                type="radio"
                name={`question-${currentQuestion}`}
                value={option.value}
                checked={answers[currentQuestion] === option.value}
                onChange={() => handleAnswerSelect(option.value)}
              />
              <AnswerLabel>
                <AnswerTitle>{option.label}</AnswerTitle>
                <AnswerDescription>{option.description}</AnswerDescription>
              </AnswerLabel>
            </AnswerOption>
          ))}
        </AnswerOptions>
      </QuestionCard>

      <NavigationButtons>
        <Button 
          variant="secondary" 
          onClick={currentQuestion === 0 ? onBack : handlePrevious}
        >
          {currentQuestion === 0 ? '‚Üê Quay l·∫°i ch·ªçn test' : '‚Üê C√¢u tr∆∞·ªõc'}
        </Button>
        
        <Button
          variant="primary"
          disabled={!canProceed}
          onClick={isLastQuestion ? handleComplete : handleNext}
        >
          {isLastQuestion ? 'Ho√†n th√†nh b√†i test' : 'C√¢u ti·∫øp theo ‚Üí'}
        </Button>
      </NavigationButtons>
    </Container>
  );
};

export default DASS21Test;