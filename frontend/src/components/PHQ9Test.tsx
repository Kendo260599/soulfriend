/**
 * Component th·ª±c hi·ªán test PHQ-9 (Patient Health Questionnaire-9)
 * ƒê√°nh gi√° m·ª©c ƒë·ªô tr·∫ßm c·∫£m
 */

import React, { useState } from 'react';
import styled from 'styled-components';

// C√°c c√¢u h·ªèi PHQ-9
const PHQ9_QUESTIONS = [
  "√çt th√≠ch th√∫ ho·∫∑c vui v·∫ª khi l√†m vi·ªác",
  "C·∫£m th·∫•y bu·ªìn b√£, ch√°n n·∫£n ho·∫∑c tuy·ªát v·ªçng",
  "Kh√≥ ng·ªß, ng·ªß kh√¥ng y√™n ho·∫∑c ng·ªß qu√° nhi·ªÅu",
  "C·∫£m th·∫•y m·ªát m·ªèi ho·∫∑c thi·∫øu nƒÉng l∆∞·ª£ng",
  "ƒÇn kh√¥ng ngon mi·ªáng ho·∫∑c ƒÉn qu√° nhi·ªÅu",
  "C·∫£m th·∫•y t·ªá v·ªÅ b·∫£n th√¢n - ho·∫∑c c·∫£m th·∫•y m√¨nh l√† m·ªôt k·∫ª th·∫•t b·∫°i ho·∫∑c ƒë√£ l√†m th·∫•t v·ªçng b·∫£n th√¢n hay gia ƒë√¨nh",
  "Kh√≥ t·∫≠p trung v√†o vi·ªác g√¨ ƒë√≥, ch·∫≥ng h·∫°n nh∆∞ ƒë·ªçc b√°o ho·∫∑c xem tivi",
  "Di chuy·ªÉn ho·∫∑c n√≥i chuy·ªán ch·∫≠m ch·∫°p ƒë·∫øn m·ª©c ng∆∞·ªùi kh√°c c√≥ th·ªÉ nh·∫≠n ra. Ho·∫∑c ng∆∞·ª£c l·∫°i - b·ªìn ch·ªìn ho·∫∑c kh√≥ y√™n ƒë·∫øn m·ª©c b·∫°n ƒëi l·∫°i nhi·ªÅu h∆°n b√¨nh th∆∞·ªùng",
  "C√≥ nh·ªØng suy nghƒ© r·∫±ng t·ªët h∆°n l√† ch·∫øt ƒëi ho·∫∑c l√†m t·ªïn th∆∞∆°ng b·∫£n th√¢n theo c√°ch n√†o ƒë√≥"
];

// C√°c l·ª±a ch·ªçn tr·∫£ l·ªùi
const ANSWER_OPTIONS = [
  { value: 0, label: "Kh√¥ng bao gi·ªù" },
  { value: 1, label: "M·ªôt v√†i ng√†y" },
  { value: 2, label: "H∆°n m·ªôt n·ª≠a s·ªë ng√†y" },
  { value: 3, label: "G·∫ßn nh∆∞ m·ªói ng√†y" }
];

// Styled Components
const Container = styled.div`
  max-width: 800px;
  margin: 0 auto;
  padding: 20px;
  background: linear-gradient(135deg, #fef7f7 0%, #f8f9fa 100%);
  min-height: 100vh;
`;

const Header = styled.div`
  text-align: center;
  margin-bottom: 40px;
`;

const Title = styled.h1`
  color: #d63384;
  font-size: 2.2rem;
  font-weight: 300;
  margin-bottom: 10px;
`;

const Subtitle = styled.p`
  color: #6c757d;
  font-size: 1.1rem;
  margin-bottom: 30px;
  line-height: 1.6;
`;

const Instructions = styled.div`
  background: #fff3cd;
  border-left: 4px solid #ffc107;
  padding: 20px;
  margin-bottom: 30px;
  border-radius: 8px;
`;

const InstructionTitle = styled.h3`
  color: #b8860b;
  margin-bottom: 10px;
  font-size: 1.1rem;
`;

const InstructionText = styled.p`
  color: #495057;
  margin: 0;
  line-height: 1.6;
`;

const QuestionCard = styled.div<{ isLastQuestion?: boolean }>`
  background: white;
  border-radius: 15px;
  padding: 25px;
  margin-bottom: 20px;
  box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
  border-left: 4px solid ${props => props.isLastQuestion ? '#dc3545' : '#d63384'};
  ${props => props.isLastQuestion && `
    background: linear-gradient(135deg, #fff5f5 0%, #ffe6e6 100%);
  `}
`;

const QuestionNumber = styled.div`
  color: #d63384;
  font-weight: 600;
  font-size: 0.9rem;
  margin-bottom: 10px;
`;

const QuestionText = styled.h3<{ isLastQuestion?: boolean }>`
  color: ${props => props.isLastQuestion ? '#dc3545' : '#495057'};
  font-size: 1.2rem;
  font-weight: 500;
  margin-bottom: 20px;
  line-height: 1.5;
`;

const OptionsContainer = styled.div`
  display: grid;
  gap: 12px;
  margin-bottom: 10px;
`;

const OptionButton = styled.button<{ selected: boolean; isLastQuestion?: boolean }>`
  padding: 15px 20px;
  border: 2px solid ${props => props.selected ? (props.isLastQuestion ? '#dc3545' : '#d63384') : '#e9ecef'};
  background: ${props => props.selected ? 
    (props.isLastQuestion ? 'linear-gradient(135deg, #dc3545 0%, #c82333 100%)' : 'linear-gradient(135deg, #d63384 0%, #e91e63 100%)') 
    : 'white'};
  color: ${props => props.selected ? 'white' : '#495057'};
  border-radius: 10px;
  font-size: 1rem;
  cursor: pointer;
  transition: all 0.3s ease;
  text-align: left;
  
  &:hover {
    border-color: ${props => props.isLastQuestion ? '#dc3545' : '#d63384'};
    ${props => !props.selected && `
      background: #fef7f7;
    `}
  }
`;

const ProgressBar = styled.div`
  background: #e9ecef;
  height: 8px;
  border-radius: 4px;
  margin: 20px 0;
  overflow: hidden;
`;

const ProgressFill = styled.div<{ progress: number }>`
  background: linear-gradient(135deg, #d63384 0%, #e91e63 100%);
  height: 100%;
  width: ${props => props.progress}%;
  transition: width 0.3s ease;
`;

const ProgressText = styled.div`
  text-align: center;
  margin-bottom: 20px;
  color: #6c757d;
`;

const NavigationButtons = styled.div`
  display: flex;
  justify-content: space-between;
  margin-top: 30px;
  gap: 20px;
`;

const Button = styled.button<{ variant: 'primary' | 'secondary' }>`
  padding: 15px 30px;
  border: none;
  border-radius: 25px;
  font-size: 1.1rem;
  font-weight: 600;
  cursor: pointer;
  transition: all 0.3s ease;
  
  ${props => props.variant === 'primary' ? `
    background: linear-gradient(135deg, #d63384 0%, #e91e63 100%);
    color: white;
    box-shadow: 0 5px 15px rgba(214, 51, 132, 0.3);
    
    &:hover {
      transform: translateY(-2px);
      box-shadow: 0 8px 25px rgba(214, 51, 132, 0.4);
    }
    
    &:disabled {
      opacity: 0.6;
      cursor: not-allowed;
      transform: none;
      box-shadow: 0 5px 15px rgba(214, 51, 132, 0.3);
    }
  ` : `
    background: white;
    color: #6c757d;
    border: 2px solid #e9ecef;
    
    &:hover {
      background: #f8f9fa;
      border-color: #d63384;
      color: #d63384;
    }
  `}
`;

const CompletionCard = styled.div`
  background: white;
  border-radius: 15px;
  padding: 40px;
  text-align: center;
  box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
`;

const CompletionIcon = styled.div`
  font-size: 4rem;
  margin-bottom: 20px;
`;

const CompletionTitle = styled.h2`
  color: #28a745;
  font-size: 1.8rem;
  margin-bottom: 15px;
`;

const CompletionText = styled.p`
  color: #6c757d;
  font-size: 1.1rem;
  margin-bottom: 30px;
  line-height: 1.6;
`;

const WarningNote = styled.div`
  background: #f8d7da;
  border: 1px solid #f5c6cb;
  color: #721c24;
  padding: 15px;
  border-radius: 8px;
  margin-top: 15px;
  font-size: 0.9rem;
  line-height: 1.5;
`;

// Props interface
interface PHQ9TestProps {
  onComplete: (answers: number[]) => void;
  onBack: () => void;
}

const PHQ9Test: React.FC<PHQ9TestProps> = ({ onComplete, onBack }) => {
  const [currentQuestion, setCurrentQuestion] = useState(0);
  const [answers, setAnswers] = useState<number[]>([]);
  const [isCompleted, setIsCompleted] = useState(false);

  /**
   * X·ª≠ l√Ω ch·ªçn ƒë√°p √°n
   */
  const handleAnswerSelect = (answerValue: number) => {
    const newAnswers = [...answers];
    newAnswers[currentQuestion] = answerValue;
    setAnswers(newAnswers);
  };

  /**
   * Chuy·ªÉn sang c√¢u h·ªèi ti·∫øp theo
   */
  const handleNext = () => {
    if (currentQuestion < PHQ9_QUESTIONS.length - 1) {
      setCurrentQuestion(currentQuestion + 1);
    } else {
      // Ho√†n th√†nh test
      setIsCompleted(true);
      setTimeout(() => {
        onComplete(answers);
      }, 2000);
    }
  };

  /**
   * Quay l·∫°i c√¢u h·ªèi tr∆∞·ªõc
   */
  const handlePrevious = () => {
    if (currentQuestion > 0) {
      setCurrentQuestion(currentQuestion - 1);
    }
  };

  const progress = ((currentQuestion + 1) / PHQ9_QUESTIONS.length) * 100;
  const isAnswered = answers[currentQuestion] !== undefined;
  const isLastQuestion = currentQuestion === PHQ9_QUESTIONS.length - 1;

  if (isCompleted) {
    return (
      <Container>
        <CompletionCard>
          <CompletionIcon>üíó</CompletionIcon>
          <CompletionTitle>Ho√†n th√†nh PHQ-9!</CompletionTitle>
          <CompletionText>
            C·∫£m ∆°n b·∫°n ƒë√£ ho√†n th√†nh b√†i ƒë√°nh gi√° PHQ-9 v·ªÅ tr·∫ßm c·∫£m. 
            H·ªá th·ªëng ƒëang x·ª≠ l√Ω k·∫øt qu·∫£ c·ªßa b·∫°n...
          </CompletionText>
        </CompletionCard>
      </Container>
    );
  }

  return (
    <Container>
      <Header>
        <Title>üí≠ PHQ-9: ƒê√°nh gi√° Tr·∫ßm c·∫£m</Title>
        <Subtitle>
          Trong 2 tu·∫ßn v·ª´a qua, b·∫°n ƒë√£ b·ªã ·∫£nh h∆∞·ªüng b·ªüi c√°c v·∫•n ƒë·ªÅ sau ƒë√¢y nh∆∞ th·∫ø n√†o?
        </Subtitle>
      </Header>

      <Instructions>
        <InstructionTitle>üìã H∆∞·ªõng d·∫´n:</InstructionTitle>
        <InstructionText>
          Vui l√≤ng ch·ªçn m·ª©c ƒë·ªô ph√π h·ª£p nh·∫•t cho t·ª´ng tri·ªáu ch·ª©ng d·ª±a tr√™n c·∫£m nh·∫≠n 
          c·ªßa b·∫°n trong 2 tu·∫ßn qua. H√£y tr·∫£ l·ªùi m·ªôt c√°ch th√†nh th·∫≠t ƒë·ªÉ c√≥ k·∫øt qu·∫£ ch√≠nh x√°c nh·∫•t.
        </InstructionText>
      </Instructions>

      <ProgressBar>
        <ProgressFill progress={progress} />
      </ProgressBar>
      
      <ProgressText>
        C√¢u h·ªèi {currentQuestion + 1} / {PHQ9_QUESTIONS.length}
      </ProgressText>

      <QuestionCard isLastQuestion={isLastQuestion}>
        <QuestionNumber>
          C√ÇU H·ªéI {currentQuestion + 1}
        </QuestionNumber>
        <QuestionText isLastQuestion={isLastQuestion}>
          {PHQ9_QUESTIONS[currentQuestion]}
        </QuestionText>
        
        {isLastQuestion && (
          <WarningNote>
            ‚ö†Ô∏è N·∫øu b·∫°n ƒëang c√≥ nh·ªØng suy nghƒ© ti√™u c·ª±c v·ªÅ b·∫£n th√¢n, h√£y t√¨m ki·∫øm s·ª± h·ªó tr·ª£ 
            t·ª´ gia ƒë√¨nh, b·∫°n b√® ho·∫∑c c√°c chuy√™n gia t√¢m l√Ω ngay l·∫≠p t·ª©c.
          </WarningNote>
        )}
        
        <OptionsContainer>
          {ANSWER_OPTIONS.map((option) => (
            <OptionButton
              key={option.value}
              selected={answers[currentQuestion] === option.value}
              isLastQuestion={isLastQuestion}
              onClick={() => handleAnswerSelect(option.value)}
            >
              {option.label}
            </OptionButton>
          ))}
        </OptionsContainer>
      </QuestionCard>

      <NavigationButtons>
        <Button 
          variant="secondary" 
          onClick={currentQuestion === 0 ? onBack : handlePrevious}
        >
          {currentQuestion === 0 ? '‚Üê Quay l·∫°i' : '‚Üê C√¢u tr∆∞·ªõc'}
        </Button>
        
        <Button 
          variant="primary" 
          disabled={!isAnswered}
          onClick={handleNext}
        >
          {currentQuestion === PHQ9_QUESTIONS.length - 1 ? 'Ho√†n th√†nh ‚úì' : 'C√¢u ti·∫øp ‚Üí'}
        </Button>
      </NavigationButtons>
    </Container>
  );
};

export default PHQ9Test;