/**
 * Component hi·ªÉn th·ªã k·∫øt qu·∫£ c√°c b√†i test t√¢m l√Ω
 */

import React from 'react';
import styled from 'styled-components';

// Interface cho k·∫øt qu·∫£ test
interface TestResult {
  testType: string;
  answers: number[];
  totalScore: number;
  evaluation: {
    level: string;
    description: string;
  };
}

// Styled Components
const Container = styled.div`
  max-width: 1000px;
  margin: 0 auto;
  padding: 40px 20px;
  background: linear-gradient(135deg, #fef7f7 0%, #fff5f5 100%);
  min-height: 100vh;
`;

const Header = styled.div`
  text-align: center;
  margin-bottom: 40px;
`;

const Title = styled.h1`
  color: #d63384;
  font-size: 2.5rem;
  font-weight: 300;
  margin-bottom: 10px;
`;

const Subtitle = styled.p`
  color: #6c757d;
  font-size: 1.2rem;
  max-width: 600px;
  margin: 0 auto 20px auto;
  line-height: 1.6;
`;

const CompletionBadge = styled.div`
  display: inline-flex;
  align-items: center;
  background: linear-gradient(135deg, #28a745, #20c997);
  color: white;
  padding: 12px 24px;
  border-radius: 50px;
  font-weight: 600;
  margin-bottom: 40px;
  box-shadow: 0 4px 15px rgba(40, 167, 69, 0.3);
`;

const ResultsGrid = styled.div`
  display: grid;
  gap: 25px;
  margin-bottom: 40px;
`;

const ResultCard = styled.div<{ level: string }>`
  background: white;
  border-radius: 15px;
  padding: 30px;
  box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
  border-left: 5px solid ${props => getColorByLevel(props.level)};
  transition: transform 0.3s ease;
  
  &:hover {
    transform: translateY(-2px);
  }
`;

const ResultHeader = styled.div`
  display: flex;
  justify-content: space-between;
  align-items: flex-start;
  margin-bottom: 20px;
`;

const TestName = styled.h3`
  color: #495057;
  font-size: 1.4rem;
  font-weight: 600;
  margin: 0;
`;

const ScoreBadge = styled.div<{ level: string }>`
  background: ${props => getColorByLevel(props.level)};
  color: white;
  padding: 8px 16px;
  border-radius: 20px;
  font-weight: 600;
  font-size: 0.9rem;
`;

const EvaluationText = styled.p`
  color: #6c757d;
  font-size: 1rem;
  line-height: 1.6;
  margin: 0 0 20px 0;
`;

const ScoreDetails = styled.div`
  background: #f8f9fa;
  border-radius: 10px;
  padding: 15px;
  margin-top: 15px;
`;

const ScoreRow = styled.div`
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 8px;
  
  &:last-child {
    margin-bottom: 0;
  }
`;

const ScoreLabel = styled.span`
  color: #6c757d;
  font-size: 0.9rem;
`;

const ScoreValue = styled.span`
  font-weight: 600;
  color: #495057;
`;

const RecommendationCard = styled.div`
  background: linear-gradient(135deg, #e3f2fd, #f3e5f5);
  border-radius: 15px;
  padding: 30px;
  margin: 30px 0;
  border: 1px solid #e1bee7;
`;

const RecommendationTitle = styled.h3`
  color: #6a1b9a;
  font-size: 1.3rem;
  margin-bottom: 20px;
  display: flex;
  align-items: center;
  
  &::before {
    content: 'üíù';
    margin-right: 10px;
    font-size: 1.5rem;
  }
`;

const RecommendationList = styled.ul`
  color: #4a148c;
  line-height: 1.8;
  
  li {
    margin-bottom: 10px;
  }
`;

const ActionButtons = styled.div`
  display: flex;
  justify-content: center;
  gap: 20px;
  margin-top: 40px;
  flex-wrap: wrap;
`;

const Button = styled.button<{ variant: 'primary' | 'secondary' | 'privacy' }>`
  padding: 15px 30px;
  border: none;
  border-radius: 50px;
  font-size: 1.1rem;
  font-weight: 600;
  cursor: pointer;
  transition: all 0.3s ease;
  
  ${props => props.variant === 'primary' ? `
    background: linear-gradient(135deg, #d63384 0%, #e91e63 100%);
    color: white;
    box-shadow: 0 5px 15px rgba(214, 51, 132, 0.3);
    
    &:hover {
      transform: translateY(-2px);
      box-shadow: 0 8px 25px rgba(214, 51, 132, 0.4);
    }
  ` : props.variant === 'privacy' ? `
    background: linear-gradient(135deg, #28a745 0%, #20c997 100%);
    color: white;
    box-shadow: 0 5px 15px rgba(40, 167, 69, 0.3);
    
    &:hover {
      transform: translateY(-2px);
      box-shadow: 0 8px 25px rgba(40, 167, 69, 0.4);
    }
  ` : `
    background: white;
    color: #6c757d;
    border: 2px solid #e9ecef;
    
    &:hover {
      background: #f8f9fa;
      border-color: #d63384;
      color: #d63384;
    }
  `}
`;

const DisclaimerCard = styled.div`
  background: #fff3cd;
  border: 1px solid #ffeaa7;
  border-radius: 10px;
  padding: 20px;
  margin: 30px 0;
`;

const DisclaimerTitle = styled.h4`
  color: #b8860b;
  margin-bottom: 10px;
  display: flex;
  align-items: center;
  
  &::before {
    content: '‚ö†Ô∏è';
    margin-right: 8px;
  }
`;

const DisclaimerText = styled.p`
  color: #8b7500;
  font-size: 0.95rem;
  line-height: 1.6;
  margin: 0;
`;

// Helper function ƒë·ªÉ l·∫•y m√†u theo level
function getColorByLevel(level: string): string {
  const safeLevel = level?.toLowerCase() || '';
  switch (safeLevel) {
    case 'minimal':
    case 'low':
    case 'normal':
      return '#28a745';
    case 'mild':
    case 'moderate':
      return '#ffc107';
    case 'moderately_severe':
    case 'high':
      return '#fd7e14';
    case 'severe':
      return '#dc3545';
    default:
      return '#6c757d';
  }
}

// Helper function ƒë·ªÉ l·∫•y t√™n ti·∫øng Vi·ªát c·ªßa test
function getTestDisplayName(testType: string): string {
  const names: { [key: string]: string } = {
    'DASS-21': 'Thang ƒëo DASS-21 (Lo √¢u - Tr·∫ßm c·∫£m - Stress)',
    'GAD-7': 'Thang ƒëo GAD-7 (Lo √¢u t·ªïng qu√°t)',
    'PHQ-9': 'Thang ƒëo PHQ-9 (Tr·∫ßm c·∫£m)',
    'EPDS': 'Thang ƒëo EPDS (Tr·∫ßm c·∫£m sau sinh)',
    'SELF_COMPASSION': 'Thang ƒëo t·ª± y√™u th∆∞∆°ng',
    'MINDFULNESS': 'Thang ƒëo ch√°nh ni·ªám',
    'SELF_CONFIDENCE': 'Thang ƒëo t·ª± tin d√†nh cho ph·ª• n·ªØ',
    'ROSENBERG_SELF_ESTEEM': 'Thang ƒëo l√≤ng t·ª± tr·ªçng Rosenberg'
  };
  return names[testType] || testType;
}

// Helper function ƒë·ªÉ l·∫•y g·ª£i √Ω chƒÉm s√≥c
function getRecommendations(results: TestResult[]): string[] {
  const recommendations = [
    "D√†nh th·ªùi gian cho b·∫£n th√¢n m·ªói ng√†y, d√π ch·ªâ 10-15 ph√∫t ƒë·ªÉ th∆∞ gi√£n",
    "Th·ª±c h√†nh h√≠t th·ªü s√¢u ho·∫∑c thi·ªÅn ƒë·ªãnh ƒë·ªÉ gi·∫£m cƒÉng th·∫≥ng",
    "Duy tr√¨ l·ªëi s·ªëng l√†nh m·∫°nh v·ªõi dinh d∆∞·ª°ng ƒë·∫ßy ƒë·ªß v√† t·∫≠p th·ªÉ d·ª•c ƒë·ªÅu ƒë·∫∑n",
    "K·∫øt n·ªëi v·ªõi b·∫°n b√®, gia ƒë√¨nh ho·∫∑c c·ªông ƒë·ªìng ƒë·ªÉ c√≥ s·ª± h·ªó tr·ª£ tinh th·∫ßn",
    "Tham gia c√°c ho·∫°t ƒë·ªông y√™u th√≠ch ho·∫∑c s·ªü th√≠ch ƒë·ªÉ n√¢ng cao tinh th·∫ßn",
    "Thi·∫øt l·∫≠p ranh gi·ªõi l√†nh m·∫°nh trong c√¥ng vi·ªác v√† cu·ªôc s·ªëng c√° nh√¢n",
    "Ghi nh·∫≠t k√Ω c·∫£m x√∫c ƒë·ªÉ hi·ªÉu r√µ h∆°n v·ªÅ b·∫£n th√¢n",
    "T√¨m ki·∫øm s·ª± h·ªó tr·ª£ chuy√™n nghi·ªáp n·∫øu c·∫£m th·∫•y c·∫ßn thi·∫øt"
  ];
  
  return recommendations.slice(0, 5); // Tr·∫£ v·ªÅ 5 g·ª£i √Ω ƒë·∫ßu ti√™n
}

// Props interface
interface TestResultsProps {
  results: TestResult[];
  onRetakeTests: () => void;
  onNewTests: () => void;
  onPrivacyManagement?: () => void;
  onBack?: () => void;
}

const TestResults: React.FC<TestResultsProps> = ({ results, onRetakeTests, onNewTests, onPrivacyManagement, onBack }) => {
  const completedCount = results.length;
  const recommendations = getRecommendations(results);

  return (
    <Container>
      <Header>
        <Title>üéâ K·∫øt qu·∫£ ƒë√°nh gi√°</Title>
        <Subtitle>
          C·∫£m ∆°n b·∫°n ƒë√£ ho√†n th√†nh c√°c b√†i ƒë√°nh gi√°. D∆∞·ªõi ƒë√¢y l√† k·∫øt qu·∫£ chi ti·∫øt 
          v√† nh·ªØng g·ª£i √Ω chƒÉm s√≥c s·ª©c kh·ªèe t√¢m l√Ω.
        </Subtitle>
        <CompletionBadge>
          ‚úÖ ƒê√£ ho√†n th√†nh {completedCount} b√†i ƒë√°nh gi√°
        </CompletionBadge>
      </Header>

      <ResultsGrid>
        {results.map((result, index) => (
          <ResultCard key={index} level={result.evaluation?.level || 'normal'}>
            <ResultHeader>
              <TestName>{getTestDisplayName(result.testType)}</TestName>
              <ScoreBadge level={result.evaluation?.level || 'normal'}>
                {(result.evaluation?.level || 'normal').toUpperCase()}
              </ScoreBadge>
            </ResultHeader>
            
            <EvaluationText>
              {result.evaluation?.description || 'Kh√¥ng c√≥ m√¥ t·∫£'}
            </EvaluationText>
            
            <ScoreDetails>
              <ScoreRow>
                <ScoreLabel>T·ªïng ƒëi·ªÉm:</ScoreLabel>
                <ScoreValue>{result.totalScore}</ScoreValue>
              </ScoreRow>
              <ScoreRow>
                <ScoreLabel>S·ªë c√¢u h·ªèi:</ScoreLabel>
                <ScoreValue>{result.answers.length}</ScoreValue>
              </ScoreRow>
              <ScoreRow>
                <ScoreLabel>ƒêi·ªÉm trung b√¨nh:</ScoreLabel>
                <ScoreValue>
                  {(result.totalScore / result.answers.length).toFixed(1)}
                </ScoreValue>
              </ScoreRow>
            </ScoreDetails>
          </ResultCard>
        ))}
      </ResultsGrid>

      <RecommendationCard>
        <RecommendationTitle>G·ª£i √Ω chƒÉm s√≥c s·ª©c kh·ªèe t√¢m l√Ω</RecommendationTitle>
        <RecommendationList>
          {recommendations.map((rec, index) => (
            <li key={index}>{rec}</li>
          ))}
        </RecommendationList>
      </RecommendationCard>

      <DisclaimerCard>
        <DisclaimerTitle>L∆∞u √Ω quan tr·ªçng</DisclaimerTitle>
        <DisclaimerText>
          K·∫øt qu·∫£ n√†y ch·ªâ mang t√≠nh ch·∫•t tham kh·∫£o v√† kh√¥ng thay th·∫ø cho vi·ªác t∆∞ v·∫•n 
          chuy√™n nghi·ªáp. N·∫øu b·∫°n ƒëang tr·∫£i qua nh·ªØng kh√≥ khƒÉn v·ªÅ s·ª©c kh·ªèe t√¢m l√Ω, 
          h√£y t√¨m ki·∫øm s·ª± h·ªó tr·ª£ t·ª´ c√°c chuy√™n gia y t·∫ø ho·∫∑c t√¢m l√Ω h·ªçc.
        </DisclaimerText>
      </DisclaimerCard>

      <ActionButtons>
        <Button variant="secondary" onClick={onRetakeTests}>
          üîÑ L√†m l·∫°i c√°c b√†i test
        </Button>
        <Button variant="primary" onClick={onNewTests}>
          ‚ûï Th·ª±c hi·ªán th√™m b√†i test kh√°c
        </Button>
        <Button variant="privacy" onClick={onPrivacyManagement}>
          üîí Qu·∫£n l√Ω d·ªØ li·ªáu c√° nh√¢n
        </Button>
        {onBack && (
          <Button variant="secondary" onClick={onBack}>
            ‚Üê Quay l·∫°i Dashboard
          </Button>
        )}
      </ActionButtons>
    </Container>
  );
};

export default TestResults;