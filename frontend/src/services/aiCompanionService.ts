/**
 * ü§ñ AI COMPANION SERVICE - T∆Ø DUY ELON MUSK + TI·∫æN Sƒ® T√ÇM L√ù
 * 
 * T·∫°o ra m·ªôt AI companion th√¥ng minh, kh√¥ng ch·ªâ ƒë√°nh gi√° m√† c√≤n:
 * - Hi·ªÉu s√¢u v·ªÅ t√¢m l√Ω ph·ª• n·ªØ Vi·ªát Nam
 * - ƒê∆∞a ra l·ªùi khuy√™n c√° nh√¢n h√≥a
 * - Theo d√µi v√† can thi·ªáp proactive
 * - K·∫øt n·ªëi v·ªõi c·ªông ƒë·ªìng v√† chuy√™n gia
 */

export interface AICompanionProfile {
  userId: string;
  personalityType: 'introvert' | 'extrovert' | 'ambivert';
  stressPatterns: string[];
  copingStrategies: string[];
  culturalContext: 'vietnamese' | 'international';
  lifeStage: 'young_adult' | 'mother' | 'professional' | 'menopause' | 'elderly';
  preferences: {
    communicationStyle: 'gentle' | 'direct' | 'supportive' | 'analytical';
    interventionLevel: 'minimal' | 'moderate' | 'intensive';
    privacyLevel: 'high' | 'medium' | 'low';
  };
  riskFactors: string[];
  protectiveFactors: string[];
  lastInteraction: Date;
  trustLevel: number; // 0-100
}

export interface AIInsight {
  id: string;
  type: 'pattern' | 'prediction' | 'recommendation' | 'warning' | 'celebration';
  title: string;
  description: string;
  confidence: number; // 0-100
  actionItems: string[];
  timeframe: 'immediate' | 'short_term' | 'long_term';
  priority: 'low' | 'medium' | 'high' | 'critical';
  evidence: string[];
  culturalRelevance: number; // 0-100
}

export interface AIIntervention {
  id: string;
  type: 'cognitive' | 'behavioral' | 'emotional' | 'social' | 'physical';
  method: 'breathing' | 'meditation' | 'journaling' | 'exercise' | 'social' | 'professional';
  title: string;
  description: string;
  duration: number; // minutes
  difficulty: 'beginner' | 'intermediate' | 'advanced';
  effectiveness: number; // 0-100
  culturalAdaptation: string;
  personalizedTips: string[];
}

class AICompanionService {
  private profiles: Map<string, AICompanionProfile> = new Map();
  private insights: Map<string, AIInsight[]> = new Map();
  private interventions: Map<string, AIIntervention[]> = new Map();
  private isInitialized: boolean = false;

  constructor() {
    this.initializeService();
  }

  // ================================
  // ELON MUSK THINKING: FIRST PRINCIPLES
  // ================================

  /**
   * T∆∞ duy Elon Musk: T·∫°i sao ph·ª• n·ªØ Vi·ªát Nam c·∫ßn AI companion?
   * - V·∫•n ƒë·ªÅ g·ªëc: Thi·∫øu h·ªó tr·ª£ t√¢m l√Ω chuy√™n bi·ªát
   * - Gi·∫£i ph√°p: AI companion hi·ªÉu s√¢u v·ªÅ vƒÉn h√≥a v√† t√¢m l√Ω
   */
  private initializeService(): void {
    console.log('ü§ñ Initializing AI Companion Service...');
    
    // Load existing profiles
    this.loadProfiles();
    
    // Initialize AI models
    this.initializeAIModels();
    
    this.isInitialized = true;
    console.log('‚úÖ AI Companion Service initialized');
  }

  private loadProfiles(): void {
    try {
      // Load existing profiles from localStorage
      const storedProfiles = localStorage.getItem('ai_companion_profiles');
      if (storedProfiles) {
        const profilesData = JSON.parse(storedProfiles);
        this.profiles = new Map(Object.entries(profilesData));
        console.log('üìä Loaded existing AI profiles:', this.profiles.size);
      }
      
      // Load existing insights
      const storedInsights = localStorage.getItem('ai_companion_insights');
      if (storedInsights) {
        const insightsData = JSON.parse(storedInsights);
        this.insights = new Map(Object.entries(insightsData));
        console.log('üí° Loaded existing AI insights:', this.insights.size);
      }
      
      // Load existing interventions
      const storedInterventions = localStorage.getItem('ai_companion_interventions');
      if (storedInterventions) {
        const interventionsData = JSON.parse(storedInterventions);
        this.interventions = new Map(Object.entries(interventionsData));
        console.log('üéØ Loaded existing AI interventions:', this.interventions.size);
      }
      
      console.log('‚ú® AI Companion ready with existing data');
    } catch (error) {
      console.error('Error clearing AI profiles:', error);
    }
  }

  private saveProfiles(): void {
    try {
      const profilesObj = Object.fromEntries(this.profiles);
      localStorage.setItem('ai_companion_profiles', JSON.stringify(profilesObj));
    } catch (error) {
      console.error('Error saving AI profiles:', error);
    }
  }

  private saveInsights(): void {
    try {
      const insightsObj = Object.fromEntries(this.insights);
      localStorage.setItem('ai_companion_insights', JSON.stringify(insightsObj));
      console.log('üí° AI insights saved to localStorage');
    } catch (error) {
      console.error('Error saving AI insights:', error);
    }
  }

  private saveInterventions(): void {
    try {
      const interventionsObj = Object.fromEntries(this.interventions);
      localStorage.setItem('ai_companion_interventions', JSON.stringify(interventionsObj));
      console.log('üéØ AI interventions saved to localStorage');
    } catch (error) {
      console.error('Error saving AI interventions:', error);
    }
  }

  private initializeAIModels(): void {
    // Initialize AI models for different aspects
    console.log('üß† Initializing AI models...');
    
    // In a real implementation, these would initialize actual AI models
    // For now, we'll just log the initialization
    console.log('‚úÖ Personality analysis model initialized');
    console.log('‚úÖ Stress pattern recognition model initialized');
    console.log('‚úÖ Cultural context model initialized');
    console.log('‚úÖ Intervention recommendation model initialized');
  }

  // ================================
  // TI·∫æN Sƒ® T√ÇM L√ù H·ªåC: EVIDENCE-BASED APPROACH
  // ================================

  /**
   * Ph√¢n t√≠ch t√¢m l√Ω d·ª±a tr√™n evidence-based research
   */
  public async analyzeUserProfile(userId: string, testResults: any[]): Promise<AICompanionProfile> {
    console.log(`üîç Analyzing user profile for ${userId}...`);
    
    // Extract patterns from test results
    const patterns = this.extractPatterns(testResults);
    
    // Analyze personality type
    const personalityType = this.analyzePersonalityType(patterns);
    
    // Identify stress patterns
    const stressPatterns = this.identifyStressPatterns(patterns);
    
    // Determine life stage
    const lifeStage = this.determineLifeStage(patterns);
    
    // Assess risk and protective factors
    const riskFactors = this.assessRiskFactors(patterns);
    const protectiveFactors = this.assessProtectiveFactors(patterns);
    
    // Create comprehensive profile
    const profile: AICompanionProfile = {
      userId,
      personalityType,
      stressPatterns,
      copingStrategies: this.generateCopingStrategies(patterns),
      culturalContext: 'vietnamese',
      lifeStage,
      preferences: this.inferPreferences(patterns),
      riskFactors,
      protectiveFactors,
      lastInteraction: new Date(),
      trustLevel: 50 // Start with moderate trust
    };
    
    // Save profile
    this.profiles.set(userId, profile);
    this.saveProfiles();
    
    // Generate initial insights
    await this.generateInsights(userId, profile);
    
    return profile;
  }

  private extractPatterns(testResults: any[]): any {
    const patterns = {
      anxiety: 0,
      depression: 0,
      stress: 0,
      selfEsteem: 0,
      socialSupport: 0,
      coping: 0,
      physical: 0,
      emotional: 0,
      cognitive: 0
    };
    
    testResults.forEach(result => {
      switch (result.testType) {
        case 'GAD_7':
          patterns.anxiety += result.totalScore;
          break;
        case 'PHQ_9':
          patterns.depression += result.totalScore;
          break;
        case 'DASS_21':
          patterns.stress += result.totalScore;
          break;
        case 'ROSENBERG_SELF_ESTEEM':
          patterns.selfEsteem += result.totalScore;
          break;
        case 'FAMILY_APGAR':
          patterns.socialSupport += result.totalScore;
          break;
        case 'MENOPAUSE_RATING':
          patterns.physical += result.totalScore;
          break;
        case 'PMS':
          patterns.physical += result.totalScore;
          break;
      }
    });
    
    return patterns;
  }

  private analyzePersonalityType(patterns: any): 'introvert' | 'extrovert' | 'ambivert' {
    // Analyze based on social support and communication patterns
    if (patterns.socialSupport > 7) return 'extrovert';
    if (patterns.socialSupport < 4) return 'introvert';
    return 'ambivert';
  }

  private identifyStressPatterns(patterns: any): string[] {
    const stressPatterns: string[] = [];
    
    // Detailed stress pattern identification
    if (patterns.anxiety > 12) {
      stressPatterns.push('Lo √¢u m·ª©c ƒë·ªô cao - c√≥ th·ªÉ ·∫£nh h∆∞·ªüng ƒë·∫øn sinh ho·∫°t h√†ng ng√†y');
    } else if (patterns.anxiety > 8) {
      stressPatterns.push('Lo √¢u v·ª´a ph·∫£i - c·∫ßn theo d√µi v√† qu·∫£n l√Ω');
    } else if (patterns.anxiety > 5) {
      stressPatterns.push('Lo √¢u nh·∫π - c√≥ th·ªÉ ki·ªÉm so√°t ƒë∆∞·ª£c');
    }
    
    if (patterns.depression > 12) {
      stressPatterns.push('Tri·ªáu ch·ª©ng tr·∫ßm c·∫£m nghi√™m tr·ªçng - c·∫ßn can thi·ªáp chuy√™n nghi·ªáp');
    } else if (patterns.depression > 8) {
      stressPatterns.push('T√¢m tr·∫°ng u s·∫ßu k√©o d√†i - c·∫ßn h·ªó tr·ª£ t√≠ch c·ª±c');
    } else if (patterns.depression > 5) {
      stressPatterns.push('Th·ªânh tho·∫£ng c·∫£m th·∫•y bu·ªìn b√£ - c√≥ th·ªÉ c·∫£i thi·ªán');
    }
    
    if (patterns.stress > 18) {
      stressPatterns.push('CƒÉng th·∫≥ng qu√° m·ª©c - nguy c∆° ki·ªát s·ª©c cao');
    } else if (patterns.stress > 12) {
      stressPatterns.push('CƒÉng th·∫≥ng m√£n t√≠nh - c·∫ßn gi·∫£m t·∫£i c√¥ng vi·ªác');
    } else if (patterns.stress > 8) {
      stressPatterns.push('√Åp l·ª±c c√¥ng vi·ªác/h·ªçc t·∫≠p - c·∫ßn c√¢n b·∫±ng');
    }
    
    if (patterns.physical > 10) {
      stressPatterns.push('Tri·ªáu ch·ª©ng th·ªÉ ch·∫•t do stress - ƒëau ƒë·∫ßu, m·ªát m·ªèi');
    } else if (patterns.physical > 6) {
      stressPatterns.push('M·ªôt s·ªë bi·ªÉu hi·ªán th·ªÉ ch·∫•t - c·∫ßn ch√∫ √Ω');
    }
    
    // Combined patterns
    if (patterns.anxiety > 8 && patterns.depression > 8) {
      stressPatterns.push('H·ªôi ch·ª©ng lo √¢u - tr·∫ßm c·∫£m - c·∫ßn can thi·ªáp to√†n di·ªán');
    }
    if (patterns.stress > 12 && patterns.physical > 6) {
      stressPatterns.push('Stress bi·ªÉu hi·ªán qua tri·ªáu ch·ª©ng th·ªÉ ch·∫•t');
    }
    
    return stressPatterns;
  }

  private determineLifeStage(patterns: any): 'young_adult' | 'mother' | 'professional' | 'menopause' | 'elderly' {
    // This would be determined by demographics and test patterns
    // For now, return based on physical symptoms
    if (patterns.physical > 10) return 'menopause';
    if (patterns.physical > 5) return 'professional';
    return 'young_adult';
  }

  private assessRiskFactors(patterns: any): string[] {
    const riskFactors: string[] = [];
    
    // Detailed risk assessment based on test scores
    if (patterns.anxiety > 10) {
      riskFactors.push('R·ªëi lo·∫°n lo √¢u (ƒëi·ªÉm GAD-7 cao)');
      riskFactors.push('Kh·∫£ nƒÉng m·∫•t ng·ªß do lo l·∫Øng');
    }
    if (patterns.depression > 10) {
      riskFactors.push('Tri·ªáu ch·ª©ng tr·∫ßm c·∫£m (ƒëi·ªÉm PHQ-9 cao)');
      riskFactors.push('Nguy c∆° m·∫•t ƒë·ªông l·ª±c sinh ho·∫°t');
    }
    if (patterns.stress > 15) {
      riskFactors.push('CƒÉng th·∫≥ng m√£n t√≠nh (ƒëi·ªÉm DASS-21 cao)');
      riskFactors.push('Nguy c∆° ki·ªát s·ª©c v·ªÅ th·ªÉ ch·∫•t v√† tinh th·∫ßn');
    }
    if (patterns.selfEsteem < 15) {
      riskFactors.push('L√≤ng t·ª± tr·ªçng th·∫•p (ƒëi·ªÉm Rosenberg th·∫•p)');
      riskFactors.push('Nguy c∆° t·ª± ti v√† r√∫t lui kh·ªèi x√£ h·ªôi');
    }
    if (patterns.socialSupport < 5) {
      riskFactors.push('Thi·∫øu h·ªó tr·ª£ x√£ h·ªôi (ƒëi·ªÉm Family APGAR th·∫•p)');
      riskFactors.push('Nguy c∆° c√¥ l·∫≠p v√† kh√≥ khƒÉn trong gia ƒë√¨nh');
    }
    
    // Additional risk factors based on combination
    if (patterns.anxiety > 8 && patterns.depression > 8) {
      riskFactors.push('H·ªôi ch·ª©ng lo √¢u - tr·∫ßm c·∫£m h·ªón h·ª£p');
    }
    if (patterns.stress > 12 && patterns.selfEsteem < 18) {
      riskFactors.push('V√≤ng xo√°y cƒÉng th·∫≥ng - t·ª± ti');
    }
    
    return riskFactors;
  }

  private assessProtectiveFactors(patterns: any): string[] {
    const protectiveFactors: string[] = [];
    
    // Detailed protective factor assessment
    if (patterns.selfEsteem > 20) {
      protectiveFactors.push('L√≤ng t·ª± tr·ªçng cao (ƒëi·ªÉm Rosenberg t·ªët)');
      protectiveFactors.push('T·ª± tin v√†o kh·∫£ nƒÉng b·∫£n th√¢n');
    }
    if (patterns.socialSupport > 7) {
      protectiveFactors.push('H·ªó tr·ª£ gia ƒë√¨nh m·∫°nh m·∫Ω (Family APGAR t·ªët)');
      protectiveFactors.push('M·∫°ng l∆∞·ªõi x√£ h·ªôi ·ªïn ƒë·ªãnh');
    }
    if (patterns.anxiety < 5) {
      protectiveFactors.push('Kh·∫£ nƒÉng ki·ªÉm so√°t lo √¢u t·ªët');
      protectiveFactors.push('T√¢m l√Ω ·ªïn ƒë·ªãnh trong √°p l·ª±c');
    }
    if (patterns.depression < 5) {
      protectiveFactors.push('Tinh th·∫ßn l·∫°c quan v√† t√≠ch c·ª±c');
      protectiveFactors.push('ƒê·ªông l·ª±c sinh ho·∫°t t·ªët');
    }
    if (patterns.stress < 8) {
      protectiveFactors.push('K·ªπ nƒÉng qu·∫£n l√Ω cƒÉng th·∫≥ng hi·ªáu qu·∫£');
      protectiveFactors.push('Kh·∫£ nƒÉng th√≠ch nghi v·ªõi thay ƒë·ªïi');
    }
    
    // Combination protective factors
    if (patterns.selfEsteem > 18 && patterns.socialSupport > 6) {
      protectiveFactors.push('T·ª± tin v√† c√≥ h·ªó tr·ª£ x√£ h·ªôi t·ªët');
    }
    if (patterns.anxiety < 6 && patterns.depression < 6) {
      protectiveFactors.push('S·ª©c kh·ªèe t√¢m l√Ω t·ªïng th·ªÉ ·ªïn ƒë·ªãnh');
    }
    
    return protectiveFactors;
  }

  private generateCopingStrategies(patterns: any): string[] {
    const strategies: string[] = [];
    
    // Anxiety coping strategies
    if (patterns.anxiety > 8) {
      strategies.push('Th·ª±c h√†nh h√≠t th·ªü s√¢u 4-7-8');
      strategies.push('Thi·ªÅn ƒë·ªãnh mindfulness h√†ng ng√†y');
      strategies.push('Vi·∫øt nh·∫≠t k√Ω lo √¢u v√† c·∫£m x√∫c');
      strategies.push('K·ªπ thu·∫≠t grounding 5-4-3-2-1');
    } else if (patterns.anxiety > 5) {
      strategies.push('Th·ªÉ d·ª•c nh·∫π nh√†ng nh∆∞ yoga');
      strategies.push('Nghe nh·∫°c th∆∞ gi√£n');
      strategies.push('Tr√≤ chuy·ªán v·ªõi b·∫°n b√® th√¢n thi·∫øt');
    }
    
    // Depression coping strategies
    if (patterns.depression > 8) {
      strategies.push('T·∫≠p th·ªÉ d·ª•c c√≥ c∆∞·ªùng ƒë·ªô v·ª´a ph·∫£i');
      strategies.push('Thi·∫øt l·∫≠p m·ª•c ti√™u nh·ªè h√†ng ng√†y');
      strategies.push('Tham gia ho·∫°t ƒë·ªông x√£ h·ªôi t√≠ch c·ª±c');
      strategies.push('Th·ª±c h√†nh l√≤ng bi·∫øt ∆°n m·ªói ng√†y');
    } else if (patterns.depression > 5) {
      strategies.push('Duy tr√¨ th√≥i quen sinh ho·∫°t ƒë·ªÅu ƒë·∫∑n');
      strategies.push('T√¨m ho·∫°t ƒë·ªông mang l·∫°i ni·ªÅm vui');
      strategies.push('K·∫øt n·ªëi v·ªõi thi√™n nhi√™n');
    }
    
    // Stress management strategies
    if (patterns.stress > 12) {
      strategies.push('Qu·∫£n l√Ω th·ªùi gian v√† ∆∞u ti√™n c√¥ng vi·ªác');
      strategies.push('H·ªçc c√°ch n√≥i "kh√¥ng" khi c·∫ßn thi·∫øt');
      strategies.push('T·∫°o kh√¥ng gian th∆∞ gi√£n t·∫°i nh√†');
      strategies.push('Th·ª±c h√†nh progressive muscle relaxation');
    } else if (patterns.stress > 8) {
      strategies.push('Ngh·ªâ ng∆°i ƒë·∫ßy ƒë·ªß v√† ƒë√∫ng gi·ªù');
      strategies.push('Chia s·∫ª g√°nh n·∫∑ng v·ªõi ng∆∞·ªùi th√¢n');
      strategies.push('T√¨m ho·∫°t ƒë·ªông gi·∫£i tr√≠ ph√π h·ª£p');
    }
    
    // Self-esteem building strategies
    if (patterns.selfEsteem < 18) {
      strategies.push('Ghi nh·∫≠n v√† khen ng·ª£i th√†nh t·ª±u b·∫£n th√¢n');
      strategies.push('Th·ª±c h√†nh t·ª± n√≥i chuy·ªán t√≠ch c·ª±c');
      strategies.push('ƒê·∫∑t ranh gi·ªõi l√†nh m·∫°nh trong m·ªëi quan h·ªá');
      strategies.push('Ph√°t tri·ªÉn k·ªπ nƒÉng v√† s·ªü th√≠ch c√° nh√¢n');
    }
    
    // Social support strategies
    if (patterns.socialSupport < 6) {
      strategies.push('T√¨m ki·∫øm v√† x√¢y d·ª±ng m·ªëi quan h·ªá t√≠ch c·ª±c');
      strategies.push('Tham gia c√°c nh√≥m c√≥ c√πng s·ªü th√≠ch');
      strategies.push('H·ªçc c√°ch chia s·∫ª c·∫£m x√∫c m·ªôt c√°ch l√†nh m·∫°nh');
      strategies.push('Duy tr√¨ li√™n l·∫°c th∆∞·ªùng xuy√™n v·ªõi gia ƒë√¨nh');
    }
    
    return strategies;
  }

  private inferPreferences(patterns: any): AICompanionProfile['preferences'] {
    return {
      communicationStyle: patterns.anxiety > 5 ? 'gentle' : 'direct',
      interventionLevel: patterns.stress > 15 ? 'intensive' : 'moderate',
      privacyLevel: 'high'
    };
  }

  // ================================
  // AI INSIGHTS GENERATION
  // ================================

  public async generateInsights(userId: string, profile: AICompanionProfile): Promise<AIInsight[]> {
    console.log(`üß† Generating advanced AI insights for ${userId}...`);
    
    const insights: AIInsight[] = [];
    
    // üîç ADVANCED PERSONALITY ANALYSIS
    const personalityInsight = this.generatePersonalityInsight(profile);
    if (personalityInsight) insights.push(personalityInsight);
    
    // üéØ STRESS PATTERN ANALYSIS  
    const stressInsight = this.generateStressPatternInsight(profile);
    if (stressInsight) insights.push(stressInsight);
    
    // ‚ö†Ô∏è RISK ASSESSMENT
    const riskInsight = this.generateRiskAssessment(profile);
    if (riskInsight) insights.push(riskInsight);
    
    // üí™ STRENGTH-BASED INSIGHTS
    const strengthInsight = this.generateStrengthInsight(profile);
    if (strengthInsight) insights.push(strengthInsight);
    
    // üå∏ CULTURAL ADAPTATION
    const culturalInsight = this.generateCulturalInsight(profile);
    if (culturalInsight) insights.push(culturalInsight);
    
    // üìà GROWTH PREDICTIONS
    const growthInsight = this.generateGrowthPrediction(profile);
    if (growthInsight) insights.push(growthInsight);
    
    console.log(`‚ú® Generated ${insights.length} advanced insights`);
    this.insights.set(userId, insights);
    this.saveInsights();
    return insights;
  }

  // ================================
  // ADVANCED INSIGHT GENERATORS
  // ================================

  private generatePersonalityInsight(profile: AICompanionProfile): AIInsight | null {
    const personalityAnalysis = this.analyzePersonalityDepth(profile);
    
    return {
      id: `personality_${Date.now()}`,
      type: 'pattern',
      title: `Ph√¢n t√≠ch t√≠nh c√°ch: ${personalityAnalysis.type}`,
      description: personalityAnalysis.description,
      confidence: personalityAnalysis.confidence,
      actionItems: personalityAnalysis.recommendations,
      timeframe: 'long_term',
      priority: 'medium',
      evidence: [`T√≠nh c√°ch: ${profile.personalityType}`, `Giai ƒëo·∫°n: ${profile.lifeStage}`],
      culturalRelevance: 95
    };
  }

  private generateStressPatternInsight(profile: AICompanionProfile): AIInsight | null {
    if (profile.stressPatterns.length === 0) return null;
    
    const stressAnalysis = this.analyzeStressComplexity(profile.stressPatterns);
    
    return {
      id: `stress_${Date.now()}`,
      type: stressAnalysis.severity > 70 ? 'warning' : 'pattern',
      title: `M·∫´u cƒÉng th·∫≥ng: ${stressAnalysis.pattern}`,
      description: stressAnalysis.analysis,
      confidence: stressAnalysis.confidence,
      actionItems: stressAnalysis.interventions,
      timeframe: stressAnalysis.severity > 70 ? 'immediate' : 'short_term',
      priority: stressAnalysis.severity > 70 ? 'high' : 'medium',
      evidence: profile.stressPatterns,
      culturalRelevance: 90
    };
  }

  private generateRiskAssessment(profile: AICompanionProfile): AIInsight | null {
    if (profile.riskFactors.length === 0) return null;
    
    const riskLevel = this.calculateRiskLevel(profile.riskFactors, profile.protectiveFactors);
    
    return {
      id: `risk_${Date.now()}`,
      type: riskLevel.level === 'high' ? 'warning' : 'recommendation',
      title: `ƒê√°nh gi√° r·ªßi ro: ${riskLevel.category}`,
      description: riskLevel.assessment,
      confidence: riskLevel.confidence,
      actionItems: riskLevel.prevention,
      timeframe: riskLevel.level === 'high' ? 'immediate' : 'short_term',
      priority: riskLevel.level === 'high' ? 'critical' : 'high',
      evidence: profile.riskFactors,
      culturalRelevance: 95
    };
  }

  private generateStrengthInsight(profile: AICompanionProfile): AIInsight | null {
    if (profile.protectiveFactors.length === 0) return null;
    
    const strengthAnalysis = this.analyzeStrengths(profile.protectiveFactors, profile.copingStrategies);
    
    return {
      id: `strength_${Date.now()}`,
      type: 'celebration',
      title: `ƒêi·ªÉm m·∫°nh: ${strengthAnalysis.category}`,
      description: strengthAnalysis.analysis,
      confidence: strengthAnalysis.confidence,
      actionItems: strengthAnalysis.amplification,
      timeframe: 'long_term',
      priority: 'medium',
      evidence: profile.protectiveFactors,
      culturalRelevance: 85
    };
  }

  private generateCulturalInsight(profile: AICompanionProfile): AIInsight | null {
    if (profile.culturalContext !== 'vietnamese') return null;
    
    const culturalAnalysis = this.analyzeCulturalFactors(profile);
    
    return {
      id: `cultural_${Date.now()}`,
      type: 'recommendation',
      title: 'Y·∫øu t·ªë vƒÉn h√≥a Vi·ªát Nam',
      description: culturalAnalysis.insight,
      confidence: 85,
      actionItems: culturalAnalysis.culturalActions,
      timeframe: 'long_term',
      priority: 'medium',
      evidence: ['B·ªëi c·∫£nh vƒÉn h√≥a Vi·ªát Nam', `Giai ƒëo·∫°n: ${profile.lifeStage}`],
      culturalRelevance: 100
    };
  }

  private generateGrowthPrediction(profile: AICompanionProfile): AIInsight | null {
    const growthPotential = this.predictGrowthTrajectory(profile);
    
    return {
      id: `growth_${Date.now()}`,
      type: 'prediction',
      title: `D·ª± ƒëo√°n ph√°t tri·ªÉn: ${growthPotential.timeline}`,
      description: growthPotential.prediction,
      confidence: growthPotential.confidence,
      actionItems: growthPotential.milestones,
      timeframe: 'long_term',
      priority: 'medium',
      evidence: [`Trust level: ${profile.trustLevel}%`, 'L·ªãch s·ª≠ t∆∞∆°ng t√°c'],
      culturalRelevance: 80
    };
  }

  // ================================
  // ADVANCED ANALYSIS HELPERS
  // ================================

  private analyzePersonalityDepth(profile: AICompanionProfile): any {
    const personalityMaps = {
      'introvert': {
        type: 'H∆∞·ªõng n·ªôi s√¢u s·∫Øc',
        description: 'B·∫°n c√≥ xu h∆∞·ªõng suy ng·∫´m n·ªôi t√¢m v√† c·∫ßn kh√¥ng gian ri√™ng ƒë·ªÉ n·∫°p nƒÉng l∆∞·ª£ng. ƒêi·ªÅu n√†y l√† m·ªôt ƒëi·ªÉm m·∫°nh gi√∫p b·∫°n hi·ªÉu b·∫£n th√¢n s√¢u s·∫Øc v√† ƒë∆∞a ra quy·∫øt ƒë·ªãnh c√¢n nh·∫Øc k·ªπ l∆∞·ª°ng.',
        confidence: 88,
        recommendations: [
          'T·∫°o kh√¥ng gian y√™n tƒ©nh cho b·∫£n th√¢n',
          'Th·ª±c h√†nh journaling ƒë·ªÉ kh√°m ph√° n·ªôi t√¢m',
          'Tham gia c√°c nh√≥m nh·ªè thay v√¨ ƒë√°m ƒë√¥ng l·ªõn'
        ]
      },
      'extrovert': {
        type: 'H∆∞·ªõng ngo·∫°i nƒÉng ƒë·ªông',
        description: 'B·∫°n thu ƒë∆∞·ª£c nƒÉng l∆∞·ª£ng t·ª´ vi·ªác t∆∞∆°ng t√°c v·ªõi ng∆∞·ªùi kh√°c v√† th√≠ch chia s·∫ª. ƒê√¢y l√† t√†i s·∫£n qu√Ω gi√∫p b·∫°n x√¢y d·ª±ng m·∫°ng l∆∞·ªõi h·ªó tr·ª£ m·∫°nh m·∫Ω v√† lan t·ªèa nƒÉng l∆∞·ª£ng t√≠ch c·ª±c.',
        confidence: 90,
        recommendations: [
          'Tham gia c√°c ho·∫°t ƒë·ªông x√£ h·ªôi c√≥ √Ω nghƒ©a',
          'Chia s·∫ª kinh nghi·ªám v·ªõi c·ªông ƒë·ªìng',
          'S·ª≠ d·ª•ng nƒÉng l∆∞·ª£ng x√£ h·ªôi ƒë·ªÉ ƒë·ªông vi√™n ng∆∞·ªùi kh√°c'
        ]
      },
      'ambivert': {
        type: 'C√¢n b·∫±ng h√†i h√≤a',
        description: 'B·∫°n c√≥ kh·∫£ nƒÉng linh ho·∫°t gi·ªØa h∆∞·ªõng n·ªôi v√† h∆∞·ªõng ngo·∫°i t√πy v√†o t√¨nh hu·ªëng. ƒê√¢y l√† m·ªôt l·ª£i th·∫ø l·ªõn gi√∫p b·∫°n th√≠ch nghi t·ªët v√† hi·ªÉu ƒë∆∞·ª£c nhi·ªÅu g√≥c nh√¨n kh√°c nhau.',
        confidence: 85,
        recommendations: [
          'Nh·∫≠n bi·∫øt nhu c·∫ßu nƒÉng l∆∞·ª£ng theo t·ª´ng th·ªùi ƒëi·ªÉm',
          'C√¢n b·∫±ng gi·ªØa th·ªùi gian m·ªôt m√¨nh v√† x√£ h·ªôi',
          'S·ª≠ d·ª•ng kh·∫£ nƒÉng th√≠ch nghi ƒë·ªÉ d·∫´n d·∫Øt nh√≥m'
        ]
      }
    };
    
    return personalityMaps[profile.personalityType] || personalityMaps['ambivert'];
  }

  private analyzeStressComplexity(stressPatterns: string[]): any {
    const stressLevel = stressPatterns.length;
    let severity = Math.min(stressLevel * 20, 100);
    let pattern = 'CƒÉng th·∫≥ng nh·∫π';
    let analysis = '';
    let interventions: string[] = [];
    
    if (stressLevel >= 4) {
      severity = 85;
      pattern = 'CƒÉng th·∫≥ng ph·ª©c t·∫°p';
      analysis = 'B·∫°n ƒëang tr·∫£i qua nhi·ªÅu ngu·ªìn cƒÉng th·∫≥ng ƒë·ªìng th·ªùi. ƒêi·ªÅu n√†y c√≥ th·ªÉ t·∫°o ra t√¨nh tr·∫°ng qu√° t·∫£i v√† ·∫£nh h∆∞·ªüng ƒë·∫øn s·ª©c kh·ªèe t·ªïng th·ªÉ. C·∫ßn c√≥ chi·∫øn l∆∞·ª£c qu·∫£n l√Ω to√†n di·ªán.';
      interventions = [
        '∆Øu ti√™n gi·∫£i quy·∫øt t·ª´ng v·∫•n ƒë·ªÅ m·ªôt c√°ch c√≥ h·ªá th·ªëng',
        'Th·ª±c h√†nh k·ªπ thu·∫≠t th·ªü s√¢u v√† meditation',
        'X√¢y d·ª±ng l·ªãch tr√¨nh ngh·ªâ ng∆°i h·ª£p l√Ω',
        'T√¨m ki·∫øm h·ªó tr·ª£ t·ª´ gia ƒë√¨nh ho·∫∑c chuy√™n gia'
      ];
    } else if (stressLevel >= 2) {
      severity = 60;
      pattern = 'CƒÉng th·∫≥ng v·ª´a ph·∫£i';
      analysis = 'B·∫°n c√≥ m·ªôt s·ªë ngu·ªìn cƒÉng th·∫≥ng c·∫ßn ƒë∆∞·ª£c qu·∫£n l√Ω. ƒê√¢y l√† t√¨nh tr·∫°ng ph·ªï bi·∫øn v√† c√≥ th·ªÉ ƒë∆∞·ª£c c·∫£i thi·ªán th√¥ng qua c√°c k·ªπ thu·∫≠t t·ª± chƒÉm s√≥c ph√π h·ª£p.';
      interventions = [
        'X√°c ƒë·ªãnh nguy√™n nh√¢n ch√≠nh g√¢y cƒÉng th·∫≥ng',
        'Th·ª±c h√†nh th·ªÉ d·ª•c ƒë·ªÅu ƒë·∫∑n',
        'Duy tr√¨ ch·∫ø ƒë·ªô ƒÉn u·ªëng v√† ng·ªß ngh·ªâ ƒë·∫ßy ƒë·ªß',
        'H·ªçc c√°ch n√≥i "kh√¥ng" khi c·∫ßn thi·∫øt'
      ];
    } else {
      analysis = 'M·ª©c ƒë·ªô cƒÉng th·∫≥ng c·ªßa b·∫°n kh√° ki·ªÉm so√°t ƒë∆∞·ª£c. H√£y ti·∫øp t·ª•c duy tr√¨ nh·ªØng g√¨ ƒëang l√†m t·ªët v√† ph√≤ng ng·ª´a cƒÉng th·∫≥ng t√≠ch l≈©y.';
      interventions = [
        'Duy tr√¨ c√°c ho·∫°t ƒë·ªông gi·∫£m stress hi·ªán t·∫°i',
        'Ph√°t tri·ªÉn k·ªπ nƒÉng qu·∫£n l√Ω th·ªùi gian',
        'X√¢y d·ª±ng th√≥i quen th∆∞ gi√£n h√†ng ng√†y'
      ];
    }
    
    return {
      severity,
      pattern,
      analysis,
      confidence: 90,
      interventions
    };
  }

  private calculateRiskLevel(riskFactors: string[], protectiveFactors: string[]): any {
    const riskScore = riskFactors.length * 25;
    const protectionScore = protectiveFactors.length * 20;
    const netRisk = Math.max(0, riskScore - protectionScore);
    
    let level = 'low';
    let category = 'R·ªßi ro th·∫•p';
    let assessment = '';
    let prevention: string[] = [];
    
    if (netRisk >= 60) {
      level = 'high';
      category = 'C·∫ßn ch√∫ √Ω';
      assessment = 'C√≥ m·ªôt s·ªë y·∫øu t·ªë r·ªßi ro c·∫ßn ƒë∆∞·ª£c theo d√µi v√† qu·∫£n l√Ω t√≠ch c·ª±c. Vi·ªác can thi·ªáp s·ªõm s·∫Ω gi√∫p ngƒÉn ng·ª´a c√°c v·∫•n ƒë·ªÅ nghi√™m tr·ªçng h∆°n.';
      prevention = [
        'Tham kh·∫£o √Ω ki·∫øn chuy√™n gia t√¢m l√Ω',
        'X√¢y d·ª±ng k·∫ø ho·∫°ch qu·∫£n l√Ω r·ªßi ro c·ª• th·ªÉ',
        'TƒÉng c∆∞·ªùng c√°c y·∫øu t·ªë b·∫£o v·ªá',
        'Theo d√µi t√¨nh tr·∫°ng ƒë·ªãnh k·ª≥'
      ];
    } else if (netRisk >= 30) {
      level = 'medium';
      category = 'C·∫ßn theo d√µi';
      assessment = 'C√≥ m·ªôt s·ªë y·∫øu t·ªë r·ªßi ro nh∆∞ng v·∫´n trong t·∫ßm ki·ªÉm so√°t. Vi·ªác duy tr√¨ l·ªëi s·ªëng l√†nh m·∫°nh v√† tƒÉng c∆∞·ªùng y·∫øu t·ªë b·∫£o v·ªá s·∫Ω r·∫•t c√≥ l·ª£i.';
      prevention = [
        'TƒÉng c∆∞·ªùng ho·∫°t ƒë·ªông th·ªÉ ch·∫•t',
        'X√¢y d·ª±ng m·∫°ng l∆∞·ªõi h·ªó tr·ª£ x√£ h·ªôi',
        'Ph√°t tri·ªÉn k·ªπ nƒÉng ·ª©ng ph√≥ v·ªõi stress',
        'Duy tr√¨ th√≥i quen t√≠ch c·ª±c'
      ];
    } else {
      assessment = 'M·ª©c ƒë·ªô r·ªßi ro hi·ªán t·∫°i kh√° th·∫•p. B·∫°n c√≥ nhi·ªÅu y·∫øu t·ªë b·∫£o v·ªá t√≠ch c·ª±c. H√£y ti·∫øp t·ª•c duy tr√¨ l·ªëi s·ªëng l√†nh m·∫°nh.';
      prevention = [
        'Ti·∫øp t·ª•c duy tr√¨ c√°c y·∫øu t·ªë b·∫£o v·ªá hi·ªán t·∫°i',
        'Chia s·∫ª kinh nghi·ªám t√≠ch c·ª±c v·ªõi ng∆∞·ªùi kh√°c',
        'Ph√≤ng ng·ª´a c√°c y·∫øu t·ªë r·ªßi ro m·ªõi'
      ];
    }
    
    return {
      level,
      category,
      assessment,
      confidence: 85,
      prevention
    };
  }

  private analyzeStrengths(protectiveFactors: string[], copingStrategies: string[]): any {
    const strengthScore = protectiveFactors.length + copingStrategies.length;
    let category = 'ƒêi·ªÉm m·∫°nh c∆° b·∫£n';
    let analysis = '';
    let amplification: string[] = [];
    
    if (strengthScore >= 6) {
      category = 'ƒêi·ªÉm m·∫°nh xu·∫•t s·∫Øc';
      analysis = 'B·∫°n c√≥ r·∫•t nhi·ªÅu t√†i nguy√™n n·ªôi t·∫°i v√† k·ªπ nƒÉng ·ª©ng ph√≥ t√≠ch c·ª±c. ƒê√¢y l√† n·ªÅn t·∫£ng v·ªØng ch·∫Øc cho s·ª± ph√°t tri·ªÉn v√† kh·∫£ nƒÉng ph·ª•c h·ªìi cao.';
      amplification = [
        'Tr·ªü th√†nh mentor cho ng∆∞·ªùi kh√°c',
        'Chia s·∫ª kinh nghi·ªám qua blog ho·∫∑c c·ªông ƒë·ªìng',
        'Ph√°t tri·ªÉn th√™m c√°c k·ªπ nƒÉng l√£nh ƒë·∫°o',
        'T·∫°o ra nh·ªØng d·ª± √°n c√≥ √Ω nghƒ©a x√£ h·ªôi'
      ];
    } else if (strengthScore >= 3) {
      category = 'ƒêi·ªÉm m·∫°nh t·ªët';
      analysis = 'B·∫°n c√≥ nh·ªØng ƒëi·ªÉm m·∫°nh ƒë√°ng k·ªÉ c√≥ th·ªÉ ƒë∆∞·ª£c ph√°t tri·ªÉn th√™m. Vi·ªác t·∫≠p trung v√†o nh·ªØng g√¨ b·∫°n l√†m t·ªët s·∫Ω t·∫°o ra ƒë·ªông l·ª±c t√≠ch c·ª±c.';
      amplification = [
        'Ph√°t tri·ªÉn s√¢u h∆°n c√°c ƒëi·ªÉm m·∫°nh hi·ªán c√≥',
        'K·∫øt n·ªëi v·ªõi nh·ªØng ng∆∞·ªùi c√≥ c√πng s·ªü th√≠ch',
        'Tham gia c√°c ho·∫°t ƒë·ªông ph√°t huy nƒÉng l·ª±c',
        'ƒê·∫∑t m·ª•c ti√™u th·ª≠ th√°ch b·∫£n th√¢n'
      ];
    } else {
      analysis = 'B·∫°n c√≥ m·ªôt s·ªë ƒëi·ªÉm m·∫°nh c∆° b·∫£n c√≥ th·ªÉ ƒë∆∞·ª£c nu√¥i d∆∞·ª°ng v√† ph√°t tri·ªÉn. M·ªói ng∆∞·ªùi ƒë·ªÅu c√≥ ti·ªÅm nƒÉng tƒÉng tr∆∞·ªüng.';
      amplification = [
        'Kh√°m ph√° c√°c s·ªü th√≠ch v√† nƒÉng khi·∫øu m·ªõi',
        'Tham gia c√°c kh√≥a h·ªçc k·ªπ nƒÉng m·ªÅm',
        'X√¢y d·ª±ng th√≥i quen t√≠ch c·ª±c h√†ng ng√†y',
        'T√¨m ki·∫øm c∆° h·ªôi th·ª≠ th√°ch b·∫£n th√¢n'
      ];
    }
    
    return {
      category,
      analysis,
      confidence: 88,
      amplification
    };
  }

  private analyzeCulturalFactors(profile: AICompanionProfile): any {
    const culturalInsights = {
      'young_adult': 'Trong vƒÉn h√≥a Vi·ªát Nam, giai ƒëo·∫°n tr·∫ª tr∆∞·ªüng th√†nh th∆∞·ªùng g·∫∑p √°p l·ª±c t·ª´ k·ª≥ v·ªçng gia ƒë√¨nh v·ªÅ s·ª± nghi·ªáp v√† h√¥n nh√¢n.',
      'mother': 'Ng∆∞·ªùi m·∫π Vi·ªát Nam th∆∞·ªùng ƒë·∫∑t con c√°i l√™n h√†ng ƒë·∫ßu, c·∫ßn c√¢n b·∫±ng gi·ªØa chƒÉm s√≥c gia ƒë√¨nh v√† b·∫£n th√¢n.',
      'professional': 'Ph·ª• n·ªØ l√†m vi·ªác t·∫°i Vi·ªát Nam c·∫ßn ƒëi·ªÅu h√≤a gi·ªØa s·ª± nghi·ªáp v√† c√°c gi√° tr·ªã truy·ªÅn th·ªëng.',
      'menopause': 'Giai ƒëo·∫°n m√£n kinh c·∫ßn s·ª± hi·ªÉu bi·∫øt v√† h·ªó tr·ª£ ƒë·∫∑c bi·ªát trong b·ªëi c·∫£nh vƒÉn h√≥a Vi·ªát.',
      'elderly': 'Ng∆∞·ªùi cao tu·ªïi trong gia ƒë√¨nh Vi·ªát c√≥ vai tr√≤ quan tr·ªçng v√† c·∫ßn ƒë∆∞·ª£c t√¥n tr·ªçng.'
    };
    
    const culturalActions = [
      'Tham gia c√°c ho·∫°t ƒë·ªông c·ªông ƒë·ªìng ƒë·ªãa ph∆∞∆°ng',
      'Duy tr√¨ k·∫øt n·ªëi v·ªõi gia ƒë√¨nh m·ªü r·ªông',
      'Th·ª±c h√†nh c√°c gi√° tr·ªã vƒÉn h√≥a t√≠ch c·ª±c',
      'T√¨m ki·∫øm s·ª± c√¢n b·∫±ng gi·ªØa truy·ªÅn th·ªëng v√† hi·ªán ƒë·∫°i'
    ];
    
    return {
      insight: culturalInsights[profile.lifeStage] || culturalInsights['young_adult'],
      culturalActions
    };
  }

  private predictGrowthTrajectory(profile: AICompanionProfile): any {
    const trustLevel = profile.trustLevel;
    let timeline = '3-6 th√°ng';
    let prediction = '';
    let milestones: string[] = [];
    let confidence = 75;
    
    if (trustLevel >= 80) {
      timeline = '1-3 th√°ng';
      prediction = 'D·ª±a tr√™n m·ª©c ƒë·ªô tin c·∫≠y cao v√† s·ª± tham gia t√≠ch c·ª±c, b·∫°n c√≥ ti·ªÅm nƒÉng ƒë·∫°t ƒë∆∞·ª£c nh·ªØng c·∫£i thi·ªán ƒë√°ng k·ªÉ trong th·ªùi gian ng·∫Øn.';
      confidence = 90;
      milestones = [
        'Th√°ng 1: C·∫£i thi·ªán k·ªπ nƒÉng t·ª± chƒÉm s√≥c',
        'Th√°ng 2: Ph√°t tri·ªÉn m·∫°ng l∆∞·ªõi h·ªó tr·ª£',
        'Th√°ng 3: ƒê·∫°t ƒë∆∞·ª£c c√¢n b·∫±ng cu·ªôc s·ªëng t·ªët h∆°n'
      ];
    } else if (trustLevel >= 50) {
      prediction = 'V·ªõi s·ª± ki√™n tr√¨ v√† √°p d·ª•ng c√°c g·ª£i √Ω, b·∫°n c√≥ th·ªÉ ƒë·∫°t ƒë∆∞·ª£c nh·ªØng thay ƒë·ªïi t√≠ch c·ª±c v√† b·ªÅn v·ªØng.';
      confidence = 80;
      milestones = [
        '2 th√°ng ƒë·∫ßu: X√¢y d·ª±ng th√≥i quen t√≠ch c·ª±c',
        'Th√°ng 3-4: C·∫£i thi·ªán k·ªπ nƒÉng ·ª©ng ph·ªë',
        'Th√°ng 5-6: ƒê·∫°t ƒë∆∞·ª£c s·ª± ·ªïn ƒë·ªãnh t√¢m l√Ω'
      ];
    } else {
      timeline = '6-12 th√°ng';
      prediction = 'C·∫ßn th·ªùi gian ƒë·ªÉ x√¢y d·ª±ng ni·ªÅm tin v√† th√≥i quen. Vi·ªác b·∫Øt ƒë·∫ßu t·ª´ nh·ªØng b∆∞·ªõc nh·ªè s·∫Ω t·∫°o n·ªÅn t·∫£ng v·ªØng ch·∫Øc cho s·ª± ph√°t tri·ªÉn l√¢u d√†i.';
      milestones = [
        '3 th√°ng ƒë·∫ßu: X√¢y d·ª±ng ni·ªÅm tin v√† th√≥i quen c∆° b·∫£n',
        'Th√°ng 4-6: Ph√°t tri·ªÉn k·ªπ nƒÉng t·ª± chƒÉm s√≥c',
        'Th√°ng 7-12: ƒê·∫°t ƒë∆∞·ª£c s·ª± ·ªïn ƒë·ªãnh v√† tƒÉng tr∆∞·ªüng'
      ];
    }
    
    return {
      timeline,
      prediction,
      confidence,
      milestones
    };
  }

  // ================================
  // PERSONALIZED INTERVENTIONS
  // ================================

  public async generateInterventions(userId: string, profile: AICompanionProfile): Promise<AIIntervention[]> {
    console.log(`üõ†Ô∏è Generating interventions for ${userId}...`);
    
    const interventions: AIIntervention[] = [];
    
    // Anxiety interventions
    if (profile.stressPatterns.includes('anxiety_prone')) {
      interventions.push({
        id: `anxiety_${Date.now()}`,
        type: 'behavioral',
        method: 'breathing',
        title: 'K·ªπ thu·∫≠t th·ªü 4-7-8',
        description: 'Th·ªü s√¢u 4 gi√¢y, gi·ªØ 7 gi√¢y, th·ªü ra 8 gi√¢y. L·∫∑p l·∫°i 4 l·∫ßn.',
        duration: 5,
        difficulty: 'beginner',
        effectiveness: 85,
        culturalAdaptation: 'Ph√π h·ª£p v·ªõi vƒÉn h√≥a Vi·ªát Nam, c√≥ th·ªÉ th·ª±c h√†nh m·ªçi l√∫c',
        personalizedTips: [
          'Th·ª±c h√†nh khi c·∫£m th·∫•y lo l·∫Øng',
          'K·∫øt h·ª£p v·ªõi thi·ªÅn ƒë·ªãnh',
          'T·∫°o th√≥i quen h√†ng ng√†y'
        ]
      });
    }
    
    // Depression interventions
    if (profile.stressPatterns.includes('depression_prone')) {
      interventions.push({
        id: `depression_${Date.now()}`,
        type: 'behavioral',
        method: 'exercise',
        title: 'V·∫≠n ƒë·ªông nh·∫π nh√†ng',
        description: 'ƒêi b·ªô 15 ph√∫t m·ªói ng√†y, t·∫≠p yoga ho·∫∑c khi√™u v≈©.',
        duration: 15,
        difficulty: 'beginner',
        effectiveness: 80,
        culturalAdaptation: 'K·∫øt h·ª£p v·ªõi √¢m nh·∫°c Vi·ªát Nam, v·∫≠n ƒë·ªông theo nh√≥m',
        personalizedTips: [
          'B·∫Øt ƒë·∫ßu v·ªõi 5 ph√∫t m·ªói ng√†y',
          'T√¨m b·∫°n ƒë·ªìng h√†nh',
          'Ghi nh·∫≠n c·∫£m x√∫c sau khi t·∫≠p'
        ]
      });
    }
    
    // Self-esteem interventions
    if (profile.stressPatterns.includes('low_self_esteem')) {
      interventions.push({
        id: `esteem_${Date.now()}`,
        type: 'cognitive',
        method: 'journaling',
        title: 'Nh·∫≠t k√Ω t√≠ch c·ª±c',
        description: 'Vi·∫øt 3 ƒëi·ªÅu t√≠ch c·ª±c v·ªÅ b·∫£n th√¢n m·ªói ng√†y.',
        duration: 10,
        difficulty: 'beginner',
        effectiveness: 75,
        culturalAdaptation: 'S·ª≠ d·ª•ng ng√¥n ng·ªØ Vi·ªát Nam, k·∫øt h·ª£p v·ªõi vƒÉn h√≥a gia ƒë√¨nh',
        personalizedTips: [
          'Vi·∫øt v·ªÅ ƒëi·ªÉm m·∫°nh c·ªßa m√¨nh',
          'Ghi nh·∫≠n th√†nh c√¥ng nh·ªè',
          'Chia s·∫ª v·ªõi ng∆∞·ªùi th√¢n'
        ]
      });
    }
    
    // Save interventions
    this.interventions.set(userId, interventions);
    this.saveInterventions();
    
    return interventions;
  }

  // ================================
  // PUBLIC API
  // ================================

  public getProfile(userId: string): AICompanionProfile | null {
    return this.profiles.get(userId) || null;
  }

  public getInsights(userId: string): AIInsight[] {
    return this.insights.get(userId) || [];
  }

  public getInterventions(userId: string): AIIntervention[] {
    return this.interventions.get(userId) || [];
  }

  public async updateTrustLevel(userId: string, change: number): Promise<void> {
    const profile = this.profiles.get(userId);
    if (profile) {
      profile.trustLevel = Math.max(0, Math.min(100, profile.trustLevel + change));
      this.saveProfiles();
    }
  }

  public async logInteraction(userId: string, interaction: string): Promise<void> {
    const profile = this.profiles.get(userId);
    if (profile) {
      profile.lastInteraction = new Date();
      this.saveProfiles();
    }
  }

  public isReady(): boolean {
    return this.isInitialized;
  }
}

// ================================
// EXPORT SINGLETON
// ================================

export const aiCompanionService = new AICompanionService();
export default aiCompanionService;
