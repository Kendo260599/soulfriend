/**
 * Google Gemini AI Service
 * T√≠ch h·ª£p Google Gemini API cho chatbot
 */

const GEMINI_API_KEY = process.env.REACT_APP_GEMINI_API_KEY || 'AIzaSyBaswf5ksxu1g7WvhS2_Hy7PHqWpjZu8LM';
const GEMINI_API_URL = 'https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash:generateContent';

export interface GeminiMessage {
  role: 'user' | 'model';
  parts: Array<{ text: string }>;
}

export interface GeminiResponse {
  text: string;
  success: boolean;
  error?: string;
}

class GeminiService {
  private apiKey: string;
  private conversationHistory: GeminiMessage[] = [];
  private isAvailable: boolean | null = null;

  constructor(apiKey: string = GEMINI_API_KEY) {
    this.apiKey = apiKey;
  }

  /**
   * Ki·ªÉm tra xem API key c√≥ ho·∫°t ƒë·ªông kh√¥ng
   */
  async testConnection(): Promise<boolean> {
    try {
      console.log('üîç Testing Gemini API connection...');
      
      const response = await fetch(
        `${GEMINI_API_URL}?key=${this.apiKey}`,
        {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            contents: [{
              parts: [{ text: 'Hello' }]
            }]
          })
        }
      );

      if (response.ok) {
        const data = await response.json();
        console.log('‚úÖ Gemini API is working!', data);
        this.isAvailable = true;
        return true;
      } else {
        const error = await response.text();
        console.error('‚ùå Gemini API error:', error);
        this.isAvailable = false;
        return false;
      }
    } catch (error) {
      console.error('‚ùå Gemini API connection failed:', error);
      this.isAvailable = false;
      return false;
    }
  }

  /**
   * G·ª≠i message t·ªõi Gemini v√† nh·∫≠n response
   */
  async sendMessage(
    userMessage: string,
    context?: {
      testResults?: any[];
      userProfile?: any;
      systemPrompt?: string;
    }
  ): Promise<GeminiResponse> {
    try {
      // Build system prompt v·ªõi CHUN personality
      const { buildCHUNSystemPrompt } = await import('./chatbotPersonality');
      const systemPrompt = context?.systemPrompt || buildCHUNSystemPrompt(context?.testResults);

      // Build messages array cho Gemini
      const messages: GeminiMessage[] = [
        {
          role: 'user',
          parts: [{ text: systemPrompt }]
        },
        {
          role: 'model',
          parts: [{ text: 'T√¥i hi·ªÉu. T√¥i s·∫Ω h·ªó tr·ª£ b·∫°n m·ªôt c√°ch chuy√™n nghi·ªáp v√† √¢n c·∫ßn v·ªÅ s·ª©c kh·ªèe t√¢m l√Ω.' }]
        },
        ...this.conversationHistory,
        {
          role: 'user',
          parts: [{ text: userMessage }]
        }
      ];

      console.log('üì§ Sending to Gemini:', userMessage);

      const response = await fetch(
        `${GEMINI_API_URL}?key=${this.apiKey}`,
        {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            contents: messages.map(msg => ({
              role: msg.role === 'user' ? 'user' : 'model',
              parts: msg.parts
            })),
            generationConfig: {
              temperature: 0.7,
              topK: 40,
              topP: 0.95,
              maxOutputTokens: 1024,
            },
            safetySettings: [
              {
                category: 'HARM_CATEGORY_HARASSMENT',
                threshold: 'BLOCK_NONE'
              },
              {
                category: 'HARM_CATEGORY_HATE_SPEECH',
                threshold: 'BLOCK_NONE'
              },
              {
                category: 'HARM_CATEGORY_SEXUALLY_EXPLICIT',
                threshold: 'BLOCK_NONE'
              },
              {
                category: 'HARM_CATEGORY_DANGEROUS_CONTENT',
                threshold: 'BLOCK_NONE'
              }
            ]
          })
        }
      );

      if (!response.ok) {
        const errorText = await response.text();
        console.error('‚ùå Gemini API error:', errorText);
        
        // Parse error ƒë·ªÉ xem API key c√≥ h·ª£p l·ªá kh√¥ng
        if (errorText.includes('API_KEY_INVALID') || errorText.includes('invalid')) {
          throw new Error('API key kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n');
        }
        
        throw new Error(`Gemini API error: ${response.status}`);
      }

      const data = await response.json();
      console.log('üì• Gemini response:', data);

      // Extract text t·ª´ response
      let text = data.candidates?.[0]?.content?.parts?.[0]?.text;
      
      if (!text) {
        // Fallback response d·ª±a tr√™n context
        if (userMessage.toLowerCase().includes('k·∫øt qu·∫£') || userMessage.toLowerCase().includes('test')) {
          text = `T√¥i hi·ªÉu b·∫°n mu·ªën bi·∫øt v·ªÅ k·∫øt qu·∫£ test. D·ª±a tr√™n k·∫øt qu·∫£ ƒë√£ ho√†n th√†nh, t√¥i c√≥ th·ªÉ gi√∫p b·∫°n hi·ªÉu:

üìä **Ph√¢n t√≠ch k·∫øt qu·∫£:**
- ƒêi·ªÉm s·ªë c·ªßa b·∫°n ph·∫£n √°nh m·ª©c ƒë·ªô hi·ªán t·∫°i
- K·∫øt qu·∫£ ch·ªâ mang t√≠nh tham kh·∫£o
- C·∫ßn ƒë√°nh gi√° chuy√™n m√¥n ƒë·ªÉ ch·∫©n ƒëo√°n ch√≠nh x√°c

üí° **G·ª£i √Ω ti·∫øp theo:**
- Th·∫£o lu·∫≠n v·ªõi chuy√™n gia t√¢m l√Ω
- Th·ª±c h√†nh c√°c k·ªπ thu·∫≠t th∆∞ gi√£n
- Theo d√µi t√¨nh tr·∫°ng theo th·ªùi gian

B·∫°n c√≥ mu·ªën t√¥i gi·∫£i th√≠ch chi ti·∫øt v·ªÅ test n√†o kh√¥ng?`;
        } else {
          text = `Xin ch√†o! T√¥i l√† CHUN - AI Companion h·ªó tr·ª£ s·ª©c kh·ªèe t√¢m l√Ω.

T√¥i c√≥ th·ªÉ gi√∫p b·∫°n:
- Hi·ªÉu k·∫øt qu·∫£ test t√¢m l√Ω
- G·ª£i √Ω k·ªπ thu·∫≠t qu·∫£n l√Ω stress
- H∆∞·ªõng d·∫´n t√¨m ki·∫øm h·ªó tr·ª£ chuy√™n nghi·ªáp
- Cung c·∫•p t√†i nguy√™n t·ª± gi√∫p ƒë·ª°

B·∫°n mu·ªën trao ƒë·ªïi v·ªÅ ƒëi·ªÅu g√¨?`;
        }
      }

      // L∆∞u v√†o conversation history
      this.conversationHistory.push(
        {
          role: 'user',
          parts: [{ text: userMessage }]
        },
        {
          role: 'model',
          parts: [{ text }]
        }
      );

      // Gi·ªõi h·∫°n history ƒë·ªÉ kh√¥ng qu√° d√†i
      if (this.conversationHistory.length > 10) {
        this.conversationHistory = this.conversationHistory.slice(-10);
      }

      return {
        text,
        success: true
      };

    } catch (error) {
      console.error('‚ùå Error calling Gemini API:', error);
      
      // Fallback response d·ª±a tr√™n context
      let fallbackText = '';
      if (userMessage.toLowerCase().includes('k·∫øt qu·∫£') || userMessage.toLowerCase().includes('test')) {
        fallbackText = `T√¥i hi·ªÉu b·∫°n mu·ªën bi·∫øt v·ªÅ k·∫øt qu·∫£ test. D·ª±a tr√™n k·∫øt qu·∫£ ƒë√£ ho√†n th√†nh, t√¥i c√≥ th·ªÉ gi√∫p b·∫°n hi·ªÉu:

üìä **Ph√¢n t√≠ch k·∫øt qu·∫£:**
- ƒêi·ªÉm s·ªë c·ªßa b·∫°n ph·∫£n √°nh m·ª©c ƒë·ªô hi·ªán t·∫°i
- K·∫øt qu·∫£ ch·ªâ mang t√≠nh tham kh·∫£o
- C·∫ßn ƒë√°nh gi√° chuy√™n m√¥n ƒë·ªÉ ch·∫©n ƒëo√°n ch√≠nh x√°c

üí° **G·ª£i √Ω ti·∫øp theo:**
- Th·∫£o lu·∫≠n v·ªõi chuy√™n gia t√¢m l√Ω
- Th·ª±c h√†nh c√°c k·ªπ thu·∫≠t th∆∞ gi√£n
- Theo d√µi t√¨nh tr·∫°ng theo th·ªùi gian

B·∫°n c√≥ mu·ªën t√¥i gi·∫£i th√≠ch chi ti·∫øt v·ªÅ test n√†o kh√¥ng?`;
      } else {
        fallbackText = `Xin ch√†o! T√¥i l√† CHUN - AI Companion h·ªó tr·ª£ s·ª©c kh·ªèe t√¢m l√Ω.

T√¥i c√≥ th·ªÉ gi√∫p b·∫°n:
- Hi·ªÉu k·∫øt qu·∫£ test t√¢m l√Ω
- G·ª£i √Ω k·ªπ thu·∫≠t qu·∫£n l√Ω stress
- H∆∞·ªõng d·∫´n t√¨m ki·∫øm h·ªó tr·ª£ chuy√™n nghi·ªáp
- Cung c·∫•p t√†i nguy√™n t·ª± gi√∫p ƒë·ª°

B·∫°n mu·ªën trao ƒë·ªïi v·ªÅ ƒëi·ªÅu g√¨?`;
      }
      
      return {
        text: fallbackText,
        success: true, // V·∫´n tr·∫£ v·ªÅ success ƒë·ªÉ kh√¥ng hi·ªÉn th·ªã l·ªói
        error: (error as Error).message
      };
    }
  }

  /**
   * Reset conversation history
   */
  resetConversation(): void {
    this.conversationHistory = [];
    console.log('üîÑ Conversation history cleared');
  }

  /**
   * Check if Gemini is available
   */
  async isGeminiAvailable(): Promise<boolean> {
    if (this.isAvailable !== null) {
      return this.isAvailable;
    }
    return await this.testConnection();
  }

  /**
   * Get API status
   */
  getStatus(): {
    isConfigured: boolean;
    isAvailable: boolean | null;
    apiKeyLength: number;
  } {
    return {
      isConfigured: !!this.apiKey,
      isAvailable: this.isAvailable,
      apiKeyLength: this.apiKey?.length || 0
    };
  }
}

// Singleton instance
export const geminiService = new GeminiService();

export default geminiService;

