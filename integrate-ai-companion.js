/**
 * Integrate AI Companion with Test Results
 * T√≠ch h·ª£p AI Companion v·ªõi k·∫øt qu·∫£ test ƒë·ªÉ t·∫°o d·ªØ li·ªáu c√° nh√¢n h√≥a
 */

// Mock test results for testing
const mockTestResults = [
    {
        testType: 'DASS_21',
        totalScore: 15,
        maxScore: 63,
        evaluation: { level: 'Trung b√¨nh', description: 'M·ª©c ƒë·ªô lo √¢u v√† stress ·ªü m·ª©c trung b√¨nh' }
    },
    {
        testType: 'PHQ_9',
        totalScore: 8,
        maxScore: 27,
        evaluation: { level: 'Nh·∫π', description: 'Tri·ªáu ch·ª©ng tr·∫ßm c·∫£m nh·∫π' }
    },
    {
        testType: 'ROSENBERG_SELF_ESTEEM',
        totalScore: 25,
        maxScore: 40,
        evaluation: { level: 'Cao', description: 'L√≤ng t·ª± tr·ªçng cao' }
    }
];

function createAIProfileFromTestResults(testResults) {
    console.log('ü§ñ Creating AI Profile from test results...');
    
    // Analyze test results to determine personality and patterns
    const patterns = analyzeTestPatterns(testResults);
    
    const profile = {
        userId: 'user_001',
        personalityType: determinePersonalityType(patterns),
        stressPatterns: identifyStressPatterns(patterns),
        copingStrategies: generateCopingStrategies(patterns),
        culturalContext: 'vietnamese',
        lifeStage: determineLifeStage(patterns),
        preferences: {
            communicationStyle: patterns.anxiety > 5 ? 'gentle' : 'direct',
            interventionLevel: patterns.stress > 15 ? 'intensive' : 'moderate',
            privacyLevel: 'high'
        },
        riskFactors: assessRiskFactors(patterns),
        protectiveFactors: assessProtectiveFactors(patterns),
        lastInteraction: new Date(),
        trustLevel: 50
    };
    
    console.log('‚úÖ AI Profile created:', profile);
    return profile;
}

function analyzeTestPatterns(testResults) {
    const patterns = {
        anxiety: 0,
        depression: 0,
        stress: 0,
        selfEsteem: 0,
        socialSupport: 0,
        physical: 0
    };
    
    testResults.forEach(result => {
        switch (result.testType) {
            case 'DASS_21':
                patterns.stress += result.totalScore;
                break;
            case 'PHQ_9':
                patterns.depression += result.totalScore;
                break;
            case 'GAD_7':
                patterns.anxiety += result.totalScore;
                break;
            case 'ROSENBERG_SELF_ESTEEM':
                patterns.selfEsteem += result.totalScore;
                break;
            case 'FAMILY_APGAR':
                patterns.socialSupport += result.totalScore;
                break;
            case 'MENOPAUSE_RATING':
                patterns.physical += result.totalScore;
                break;
        }
    });
    
    return patterns;
}

function determinePersonalityType(patterns) {
    if (patterns.socialSupport > 7) return 'extrovert';
    if (patterns.socialSupport < 4) return 'introvert';
    return 'ambivert';
}

function identifyStressPatterns(patterns) {
    const stressPatterns = [];
    
    if (patterns.anxiety > 8) {
        stressPatterns.push('Lo √¢u m·ª©c ƒë·ªô cao - c·∫ßn theo d√µi v√† qu·∫£n l√Ω');
    } else if (patterns.anxiety > 5) {
        stressPatterns.push('Lo √¢u v·ª´a ph·∫£i - c√≥ th·ªÉ ki·ªÉm so√°t ƒë∆∞·ª£c');
    }
    
    if (patterns.depression > 8) {
        stressPatterns.push('T√¢m tr·∫°ng u s·∫ßu k√©o d√†i - c·∫ßn h·ªó tr·ª£ t√≠ch c·ª±c');
    } else if (patterns.depression > 5) {
        stressPatterns.push('Th·ªânh tho·∫£ng c·∫£m th·∫•y bu·ªìn b√£ - c√≥ th·ªÉ c·∫£i thi·ªán');
    }
    
    if (patterns.stress > 12) {
        stressPatterns.push('CƒÉng th·∫≥ng m√£n t√≠nh - c·∫ßn gi·∫£m t·∫£i c√¥ng vi·ªác');
    } else if (patterns.stress > 8) {
        stressPatterns.push('√Åp l·ª±c c√¥ng vi·ªác/h·ªçc t·∫≠p - c·∫ßn c√¢n b·∫±ng');
    }
    
    return stressPatterns;
}

function generateCopingStrategies(patterns) {
    const strategies = [];
    
    if (patterns.anxiety > 5) {
        strategies.push('Th·ª±c h√†nh k·ªπ thu·∫≠t th·ªü 4-7-8');
        strategies.push('Thi·ªÅn ƒë·ªãnh ch√°nh ni·ªám');
    }
    
    if (patterns.depression > 5) {
        strategies.push('T·∫≠p th·ªÉ d·ª•c nh·∫π nh√†ng');
        strategies.push('Ti·∫øp x√∫c v·ªõi √°nh s√°ng t·ª± nhi√™n');
    }
    
    if (patterns.stress > 8) {
        strategies.push('T·∫°o ranh gi·ªõi r√µ r√†ng gi·ªØa c√¥ng vi·ªác v√† cu·ªôc s·ªëng');
        strategies.push('Th·ª±c h√†nh yoga ho·∫∑c th√°i c·ª±c quy·ªÅn');
    }
    
    if (patterns.selfEsteem < 20) {
        strategies.push('Vi·∫øt nh·∫≠t k√Ω t√≠ch c·ª±c');
        strategies.push('Th·ª±c h√†nh t·ª± khen ng·ª£i');
    }
    
    return strategies;
}

function determineLifeStage(patterns) {
    if (patterns.physical > 10) return 'menopause';
    if (patterns.physical > 5) return 'professional';
    return 'young_adult';
}

function assessRiskFactors(patterns) {
    const riskFactors = [];
    
    if (patterns.anxiety > 10) {
        riskFactors.push('R·ªëi lo·∫°n lo √¢u (ƒëi·ªÉm GAD-7 cao)');
    }
    
    if (patterns.depression > 10) {
        riskFactors.push('Tri·ªáu ch·ª©ng tr·∫ßm c·∫£m (ƒëi·ªÉm PHQ-9 cao)');
    }
    
    if (patterns.stress > 15) {
        riskFactors.push('CƒÉng th·∫≥ng qu√° m·ª©c (ƒëi·ªÉm DASS-21 cao)');
    }
    
    return riskFactors;
}

function assessProtectiveFactors(patterns) {
    const protectiveFactors = [];
    
    if (patterns.selfEsteem > 25) {
        protectiveFactors.push('L√≤ng t·ª± tr·ªçng cao');
    }
    
    if (patterns.socialSupport > 5) {
        protectiveFactors.push('H·ªó tr·ª£ x√£ h·ªôi t·ªët');
    }
    
    if (patterns.anxiety < 5 && patterns.depression < 5) {
        protectiveFactors.push('S·ª©c kh·ªèe t√¢m l√Ω ·ªïn ƒë·ªãnh');
    }
    
    return protectiveFactors;
}

function createAIInsights(profile) {
    console.log('üí° Creating AI Insights...');
    
    const insights = [
        {
            id: `personality_${Date.now()}`,
            type: 'pattern',
            title: `Ph√¢n t√≠ch t√≠nh c√°ch: ${profile.personalityType === 'introvert' ? 'H∆∞·ªõng n·ªôi' : profile.personalityType === 'extrovert' ? 'H∆∞·ªõng ngo·∫°i' : 'C√¢n b·∫±ng'}`,
            description: profile.personalityType === 'introvert' 
                ? 'B·∫°n c√≥ xu h∆∞·ªõng h∆∞·ªõng n·ªôi, th√≠ch kh√¥ng gian y√™n tƒ©nh v√† suy nghƒ© s√¢u s·∫Øc. ƒê√¢y l√† ƒëi·ªÉm m·∫°nh gi√∫p b·∫°n c√≥ kh·∫£ nƒÉng t·ª± ph·∫£n √°nh v√† ph√°t tri·ªÉn n·ªôi t√¢m.'
                : profile.personalityType === 'extrovert'
                ? 'B·∫°n c√≥ xu h∆∞·ªõng h∆∞·ªõng ngo·∫°i, th√≠ch t∆∞∆°ng t√°c x√£ h·ªôi v√† h·ªçc h·ªèi t·ª´ ng∆∞·ªùi kh√°c. ƒê√¢y l√† ƒëi·ªÉm m·∫°nh gi√∫p b·∫°n x√¢y d·ª±ng m·ªëi quan h·ªá v√† ph√°t tri·ªÉn k·ªπ nƒÉng giao ti·∫øp.'
                : 'B·∫°n c√≥ t√≠nh c√°ch c√¢n b·∫±ng, c√≥ th·ªÉ th√≠ch nghi v·ªõi c·∫£ m√¥i tr∆∞·ªùng y√™n tƒ©nh v√† s√¥i ƒë·ªông. ƒê√¢y l√† ƒëi·ªÉm m·∫°nh gi√∫p b·∫°n linh ho·∫°t trong c√°c t√¨nh hu·ªëng kh√°c nhau.',
            confidence: 85,
            actionItems: profile.personalityType === 'introvert' 
                ? ['T·∫°o kh√¥ng gian y√™n tƒ©nh cho b·∫£n th√¢n', 'Th·ª±c h√†nh journaling ƒë·ªÉ kh√°m ph√° n·ªôi t√¢m', 'Tham gia c√°c nh√≥m nh·ªè thay v√¨ ƒë√°m ƒë√¥ng l·ªõn']
                : profile.personalityType === 'extrovert'
                ? ['Tham gia c√°c ho·∫°t ƒë·ªông nh√≥m', 'Chia s·∫ª kinh nghi·ªám v·ªõi ng∆∞·ªùi kh√°c', 'T√¨m ki·∫øm c∆° h·ªôi l√£nh ƒë·∫°o']
                : ['C√¢n b·∫±ng gi·ªØa th·ªùi gian m·ªôt m√¨nh v√† v·ªõi ng∆∞·ªùi kh√°c', 'Linh ho·∫°t trong c√°ch ti·∫øp c·∫≠n c√°c t√¨nh hu·ªëng', 'T·∫≠n d·ª•ng c·∫£ hai m·∫∑t c·ªßa t√≠nh c√°ch'],
            timeframe: 'long_term',
            priority: 'medium',
            evidence: [`T√≠nh c√°ch: ${profile.personalityType}`, `Giai ƒëo·∫°n: ${profile.lifeStage}`],
            culturalRelevance: 95
        }
    ];
    
    // Add stress pattern insight if there are stress patterns
    if (profile.stressPatterns.length > 0) {
        insights.push({
            id: `stress_${Date.now()}`,
            type: 'pattern',
            title: 'M·∫´u cƒÉng th·∫≥ng: C·∫ßn qu·∫£n l√Ω stress',
            description: `B·∫°n ƒëang tr·∫£i qua c√°c m·∫´u cƒÉng th·∫≥ng: ${profile.stressPatterns.join(', ')}. ƒêi·ªÅu n√†y c√≥ th·ªÉ ·∫£nh h∆∞·ªüng ƒë·∫øn s·ª©c kh·ªèe t√¢m l√Ω v√† th·ªÉ ch·∫•t.`,
            confidence: 80,
            actionItems: [
                'Th·ª±c h√†nh k·ªπ thu·∫≠t th·ªü 4-7-8',
                'T·∫°o ranh gi·ªõi r√µ r√†ng gi·ªØa c√¥ng vi·ªác v√† cu·ªôc s·ªëng',
                'T√¨m ki·∫øm h·ªó tr·ª£ t·ª´ ng∆∞·ªùi th√¢n ho·∫∑c chuy√™n gia'
            ],
            timeframe: 'short_term',
            priority: 'high',
            evidence: profile.stressPatterns,
            culturalRelevance: 90
        });
    }
    
    // Add risk assessment if there are risk factors
    if (profile.riskFactors.length > 0) {
        insights.push({
            id: `risk_${Date.now()}`,
            type: 'warning',
            title: 'ƒê√°nh gi√° r·ªßi ro: C·∫ßn ch√∫ √Ω',
            description: `C√≥ m·ªôt s·ªë y·∫øu t·ªë r·ªßi ro c·∫ßn ch√∫ √Ω: ${profile.riskFactors.join(', ')}. H√£y theo d√µi v√† t√¨m ki·∫øm h·ªó tr·ª£ khi c·∫ßn thi·∫øt.`,
            confidence: 75,
            actionItems: [
                'Theo d√µi c√°c tri·ªáu ch·ª©ng th∆∞·ªùng xuy√™n',
                'T√¨m ki·∫øm h·ªó tr·ª£ chuy√™n nghi·ªáp n·∫øu c·∫ßn',
                'Th·ª±c h√†nh c√°c k·ªπ thu·∫≠t qu·∫£n l√Ω stress'
            ],
            timeframe: 'immediate',
            priority: 'high',
            evidence: profile.riskFactors,
            culturalRelevance: 85
        });
    }
    
    console.log('‚úÖ AI Insights created:', insights.length);
    return insights;
}

function createAIInterventions(profile) {
    console.log('üéØ Creating AI Interventions...');
    
    const interventions = [];
    
    // Anxiety interventions
    if (profile.stressPatterns.some(pattern => pattern.includes('lo √¢u'))) {
        interventions.push({
            id: `anxiety_${Date.now()}`,
            type: 'behavioral',
            method: 'breathing',
            title: 'K·ªπ thu·∫≠t th·ªü 4-7-8',
            description: 'Th·ªü s√¢u 4 gi√¢y, gi·ªØ 7 gi√¢y, th·ªü ra 8 gi√¢y. L·∫∑p l·∫°i 4 l·∫ßn.',
            duration: 5,
            difficulty: 'beginner',
            effectiveness: 85,
            culturalAdaptation: 'Ph√π h·ª£p v·ªõi vƒÉn h√≥a Vi·ªát Nam, c√≥ th·ªÉ th·ª±c h√†nh m·ªçi l√∫c',
            personalizedTips: [
                'Th·ª±c h√†nh khi c·∫£m th·∫•y lo l·∫Øng',
                'K·∫øt h·ª£p v·ªõi thi·ªÅn ƒë·ªãnh',
                'T·∫°o th√≥i quen h√†ng ng√†y'
            ]
        });
    }
    
    // Depression interventions
    if (profile.stressPatterns.some(pattern => pattern.includes('bu·ªìn') || pattern.includes('tr·∫ßm c·∫£m'))) {
        interventions.push({
            id: `depression_${Date.now()}`,
            type: 'behavioral',
            method: 'exercise',
            title: 'Ho·∫°t ƒë·ªông th·ªÉ ch·∫•t nh·∫π nh√†ng',
            description: 'ƒêi b·ªô 20-30 ph√∫t m·ªói ng√†y, t·∫≠p yoga ho·∫∑c th√°i c·ª±c quy·ªÅn.',
            duration: 30,
            difficulty: 'beginner',
            effectiveness: 75,
            culturalAdaptation: 'Ph√π h·ª£p v·ªõi vƒÉn h√≥a Vi·ªát Nam, c√≥ th·ªÉ t·∫≠p t·∫°i nh√†',
            personalizedTips: [
                'B·∫Øt ƒë·∫ßu v·ªõi 10 ph√∫t m·ªói ng√†y',
                'TƒÉng d·∫ßn th·ªùi gian theo kh·∫£ nƒÉng',
                'K·∫øt h·ª£p v·ªõi √¢m nh·∫°c y√™u th√≠ch'
            ]
        });
    }
    
    // Stress interventions
    if (profile.stressPatterns.some(pattern => pattern.includes('cƒÉng th·∫≥ng') || pattern.includes('stress'))) {
        interventions.push({
            id: `stress_${Date.now()}`,
            type: 'cognitive',
            method: 'journaling',
            title: 'Vi·∫øt nh·∫≠t k√Ω c·∫£m x√∫c',
            description: 'Vi·∫øt v·ªÅ c·∫£m x√∫c v√† suy nghƒ© h√†ng ng√†y ƒë·ªÉ hi·ªÉu r√µ b·∫£n th√¢n h∆°n.',
            duration: 15,
            difficulty: 'beginner',
            effectiveness: 70,
            culturalAdaptation: 'Ph√π h·ª£p v·ªõi vƒÉn h√≥a Vi·ªát Nam, c√≥ th·ªÉ vi·∫øt b·∫±ng ti·∫øng Vi·ªát',
            personalizedTips: [
                'Vi·∫øt v√†o bu·ªïi t·ªëi tr∆∞·ªõc khi ng·ªß',
                'Kh√¥ng c·∫ßn vi·∫øt d√†i, ch·ªâ c·∫ßn ghi l·∫°i c·∫£m x√∫c',
                'ƒê·ªçc l·∫°i sau 1 tu·∫ßn ƒë·ªÉ th·∫•y s·ª± thay ƒë·ªïi'
            ]
        });
    }
    
    console.log('‚úÖ AI Interventions created:', interventions.length);
    return interventions;
}

function integrateAICompanion(testResults) {
    console.log('üöÄ Integrating AI Companion with test results...');
    
    try {
        // Create AI profile from test results
        const profile = createAIProfileFromTestResults(testResults);
        
        // Create AI insights
        const insights = createAIInsights(profile);
        
        // Create AI interventions
        const interventions = createAIInterventions(profile);
        
        // Save to localStorage
        localStorage.setItem('ai_companion_profiles', JSON.stringify({ 'user_001': profile }));
        localStorage.setItem('ai_companion_insights', JSON.stringify({ 'user_001': insights }));
        localStorage.setItem('ai_companion_interventions', JSON.stringify({ 'user_001': interventions }));
        
        console.log('‚úÖ AI Companion integration completed!');
        console.log('üìä Profile:', profile);
        console.log('üí° Insights:', insights.length);
        console.log('üéØ Interventions:', interventions.length);
        
        return {
            success: true,
            profile,
            insights,
            interventions
        };
    } catch (error) {
        console.error('‚ùå Error integrating AI Companion:', error);
        return {
            success: false,
            error: error.message
        };
    }
}

// Test the integration
console.log('üß™ Testing AI Companion integration...');
const result = integrateAICompanion(mockTestResults);

if (result.success) {
    console.log('üéâ AI Companion integration successful!');
    console.log('üí° Dashboard should now show personalized data');
} else {
    console.log('‚ùå AI Companion integration failed:', result.error);
}
